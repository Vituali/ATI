

// --- .gitignore ---

merge_resultado.txt


// --- admin.html ---

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Painel de Administração - ATI</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" type="image/x-icon" href="assets/images/favicon.ico">
    <!-- CSS principal que importa todos os outros (themes, components, layout) -->
    <link rel="stylesheet" href="assets/css/main.css">
    <!-- CSS específico para a página de admin -->
    <link rel="stylesheet" href="assets/css/admin.css">
</head>
<body class="dark-mode">
    <!-- Popup para notificações, reutilizado do ui.js -->
    <div id="popup" class="popup"></div>

    <!-- O contêiner .content é definido em layout.css -->
    <div class="content">
        <!-- Loader de carregamento inicial -->
        <div class="card-loader" id="adminLoader" style="display: flex;">
            <div class="loader"></div>
        </div>
        
        <!-- Conteúdo principal, fica visível após o carregamento -->
        <div id="mainContent" style="display: none;">
            
            <!-- Card de Gerenciamento de Usuários -->
            <div class="card">
                <h2>Gerenciamento de Usuários</h2>
                <p>Controle as permissões e o status dos usuários do sistema.</p>
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>Usuário (Login)</th>
                            <th>Nome Completo</th>
                            <th>Permissão</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="userListBody">
                        <!-- Linhas da tabela serão inseridas aqui via JavaScript -->
                    </tbody>
                </table>
            </div>

            <!-- Card da Ferramenta de Verificação -->
            <div class="card checker-section">
                <h2>Verificação de Usuários Órfãos</h2>
                <p>Encontre contas na Autenticação sem dados correspondentes no Banco de Dados.</p>

                <div id="checkerStep1">
                    <button id="loadValidUsersBtn" class="button">Passo 1: Carregar Usuários Válidos</button>
                </div>

                <div id="checkerStep2" class="hidden">
                    <h3>Passo 2: Cole a lista do Painel de Autenticação</h3>
                    <div class="instructions">
                        <ol>
                            <li>No <a href="https://console.firebase.google.com/" target="_blank">Painel do Firebase</a>, vá para <strong>Authentication > Users</strong>.</li>
                            <li>Selecione e copie toda a lista de usuários (Ctrl+A, Ctrl+C).</li>
                            <li>Cole o conteúdo no campo abaixo (Ctrl+V).</li>
                        </ol>
                    </div>
                    <textarea id="authPasteArea" placeholder="Cole os dados copiados do painel de autenticação aqui..."></textarea>
                    <button id="compareBtn" class="button">Passo 3: Encontrar Contas Órfãs</button>
                </div>

                <div id="checkerResults" class="results hidden">
                    <h3>Resultado da Comparação:</h3>
                    <p>As seguintes contas são órfãs e podem ser excluídas no Firebase.</p>
                    <ul id="orphanList" class="user-list">
                        <!-- Contas órfãs serão listadas aqui -->
                    </ul>
                </div>
            </div>

            <!-- Botão para voltar à aplicação principal -->
            <a href="index.html" id="backToAppBtn">Voltar para a aplicação</a>
        </div>
    </div>
    
    <!-- Script principal da página de administração -->
    <script type="module" src="assets/js/admin.js"></script>
</body>
</html>


// --- assets\css\admin.css ---

/* ==========================================================================
   ADMIN.CSS - Estilos para o Painel de Administração
   ========================================================================== */

/* --- Layout Geral da Página de Admin --- */
/* Ajusta o contêiner principal para empilhar os cards verticalmente */
.content {
    flex-direction: column; /* Empilha os cards */
    align-items: center;    /* Centraliza os cards horizontalmente */
    gap: 20px; /* Espaço entre os cards */
}

/* Garante que o conteúdo principal não fique muito largo em telas grandes */
#mainContent {
    display: flex;
    flex-direction: column;
    gap: 20px;
    width: 100%;
    max-width: 900px; /* Limita a largura máxima */
}

/* --- Estilização dos Cards --- */
.card h2 {
    font-family: var(--font-primary);
    color: var(--heading-color);
    margin-bottom: 10px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--border-color);
}

.card p {
    margin-bottom: 20px;
    font-size: 14px;
    color: var(--text-primary);
    opacity: 0.8;
}

/* --- Tabela de Gerenciamento --- */
.admin-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 15px;
}

.admin-table th,
.admin-table td {
    border: 1px solid var(--border-color);
    padding: 12px;
    text-align: left;
    vertical-align: middle;
}

.admin-table th {
    background-color: rgba(0, 0, 0, 0.1);
    font-family: var(--font-primary);
    font-size: 14px;
}

.admin-table select {
    background-color: var(--input-bg);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 5px;
    padding: 8px;
    width: 100%;
    font-size: 14px;
}

.admin-table select:focus {
    outline: none;
    border-color: var(--icon-color);
}

.admin-table button {
    margin: 0;
    width: 100%;
    padding: 8px 12px;
}

/* --- Ferramenta de Verificação de Órfãos --- */
.checker-section textarea {
    background-color: var(--input-bg);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 5px;
    width: 100%;
    min-height: 150px;
    margin-top: 10px;
    padding: 10px;
    font-family: monospace;
}

.checker-section .instructions {
    margin-bottom: 15px;
}

.checker-section .instructions ol {
    line-height: 1.8;
    padding-left: 20px;
    font-size: 14px;
}

.checker-section .user-list {
    list-style: none;
    padding: 10px;
    margin-top: 10px;
    background-color: rgba(0,0,0,0.1);
    border-radius: 5px;
    max-height: 200px;
    overflow-y: auto;
}

.checker-section .orphan {
    color: var(--error-color, #F43F5E);
    font-weight: bold;
}

.checker-section .valid {
    color: var(--success-color, #22C55E);
}

/* --- Botão de Voltar --- */
#backToAppBtn {
    display: block;
    width: 100%;
    max-width: 900px;
    text-align: center;
    margin: 10px auto 0;
    padding: 12px 20px;
    background: var(--button-bg);
    color: var(--button-text);
    border-radius: 5px;
    text-decoration: none;
    font-family: var(--font-primary);
    transition: background 0.3s, transform 0.2s;
}

#backToAppBtn:hover {
    background: var(--button-hover-bg);
    transform: scale(1.02);
}

.hidden {
    display: none;
}


// --- assets\css\components.css ---

/* ==========================================================================
   COMPONENTS.CSS - Estilos para todos os elementos de UI reutilizáveis
   ========================================================================== */

/* --- Cards e Contêineres de Conteúdo --- */
.card,
.upload-card {
    position: relative;
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 10px;
    padding: 20px;
    margin: 15px 0;
    max-width: 1200px;
    width: 100%;
    min-height: 200px;
    box-sizing: border-box;
}

.upload-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
    width: 100%;
}

/* --- Botões da Barra Lateral --- */
.sidebar-button,
.toggle-sidebar,
.dark-mode-toggle {
    background: transparent;
    color: var(--icon-color);
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    transition: color 0.3s, background 0.2s, transform 0.2s;
}

.sidebar-footer {
    margin-top: auto;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.bottom-toggle {
    background: transparent;
    color: var(--icon-color);
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    transition: color 0.3s, background 0.2s, transform 0.2s;
    width: 100%;
    border-radius: 5px;
}

.bottom-toggle .text {
    display: none;
    font-family: var(--font-primary);
    font-size: 16px;
    white-space: nowrap;
}

.bottom-toggle .text {
    display: none; /* Esconde o texto por padrão */
    white-space: nowrap;
}

.sidebar.expanded .bottom-toggle .text {
    display: inline-block;
}

.bottom-toggle:hover {
    background: rgba(0, 0, 0, 0.1);
    transform: scale(1.05);
}

.sidebar-button {
    font-family: var(--font-primary);
    font-size: 16px;
    border-radius: 5px;
}

.dark-mode-toggle {
    width: 100%;
}

.sidebar-button .icon {
    font-size: 20px;
}

.sidebar-button .text {
    display: none;
    white-space: nowrap;
}

.sidebar.expanded .sidebar-button .text {
    display: inline-block;
}

.sidebar-button:hover,
.toggle-sidebar:hover,
.dark-mode-toggle:hover {
    background: rgba(0, 0, 0, 0.1);
    transform: scale(1.05);
}

.sidebar-button.active {
    background: var(--icon-color); /* Cor customizável via JS */
    color: var(--button-text);
}

.sidebar-button.active .text {
    text-shadow: 0 0 5px rgba(0, 0, 0, 0.7);
}

/* --- Botões Principais --- */
.button,
.copy-btn,
.file-label {
    background: var(--button-bg);
    color: var(--button-text);
    border: none;
    padding: 8px 16px;
    border-radius: 5px;
    cursor: pointer;
    font-family: var(--font-primary);
    font-size: 14px;
    margin: 5px;
    text-align: center;
    flex: 1 1 10px;
    max-width: 150px;
    transition: background 0.3s, transform 0.2s;
}

.button:hover,
.copy-btn:hover,
.file-label:hover {
    background: var(--button-hover-bg);
    transform: scale(1.05);
}

/* Botão especial de voltar */
.button.back {
    background: #6B7280;
}
.button.back:hover {
    background: #4B5563;
}
.dark-mode .button.back {
    background: #4B5563;
}
.dark-mode .button.back:hover {
    background: #374151;
}

/* --- Elementos de Formulário --- */
input,
select,
textarea {
    width: 100%;
    padding: 8px;
    margin: 5px 0;
    border: 1px solid var(--border-color);
    background: var(--input-bg);
    color: var(--text-primary);
    border-radius: 5px;
    font-size: 14px;
    box-sizing: border-box;
    font-family: var(--font-secondary);
}

textarea {
    resize: vertical;
    min-height: 80px;
}

input:focus,
select:focus,
textarea:focus {
    outline: none;
    border-color: var(--icon-color); /* Destaca com a cor do ícone ao focar */
}

input[type="color"] {
    width: 40px;
    height: 40px;
    padding: 2px;
    vertical-align: middle;
    cursor: pointer;
}

.error {
    color: var(--error-color);
    font-size: 12px;
    margin-top: 5px;
    display: block;
}

.grupo {
    margin-bottom: 15px;
}

.grupo label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.grupo p {
    margin: 5px 0;
}

/* --- Upload de Arquivo --- */
.file-upload-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
}
.file-input {
    display: none;
}
.file-name {
    text-align: center;
}

/* --- Popups --- */
.popup {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--button-bg);
    color: var(--button-text);
    padding: 10px 20px;
    border-radius: 5px;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 3000;
}
.popup.show {
    opacity: 1;
}

.customization-popup {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--card-bg);
    padding: 20px;
    border-radius: 10px;
    z-index: 1000;
    max-width: 400px;
    width: 90%;
    border: 1px solid var(--border-color);
}
.customization-group {
    margin-bottom: 15px;
}
.customization-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}
.theme-options {
    display: flex;
    flex-direction: column;
    gap: 10px;
}
.customization-buttons {
    display: flex;
    gap: 10px;
    justify-content: space-between;
}

/* --- Switch Toggle --- */
.switch {
    position: relative;
    display: inline-block;
    width: 50px; /* Tamanho explícito para garantir consistência */
    height: 24px;
    margin-left: 10px;
    flex-shrink: 0; /* Impede que o switch encolha */
}
.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--switch-bg);
    transition: background 0.3s;
    border-radius: 24px;
}
.slider:before {
    position: absolute;
    content: "";
    height: 18px; /* Tamanho explícito da bolinha */
    width: 18px;
    left: 3px;   /* Posição inicial da bolinha */
    bottom: 3px;
    background: white;
    transition: transform 0.3s;
    border-radius: 50%;
}
input:checked + .slider {
    background: var(--switch-bg-checked);
}
input:checked + .slider:before {
    transform: translateX(26px); /* Distância que a bolinha se move */
}

/* --- Checkbox Customizado --- */
.checkbox-group {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin: 10px 0;
}
.checkbox-label {
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
}
.checkbox-custom {
    width: 18px;
    height: 18px;
    border: 2px solid var(--border-color);
    border-radius: 4px;
    display: inline-block;
    position: relative;
    transition: background 0.3s, border-color 0.3s;
}
.checkbox-label input {
    display: none;
}
.checkbox-label input:checked + .checkbox-custom {
    background: var(--button-bg);
    border: var(--button-bg);
}
.checkbox-custom::after {
    content: '✔';
    color: var(--button-text);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0);
    font-size: 12px;
    transition: transform 0.2s;
}
.checkbox-label input:checked + .checkbox-custom::after {
    transform: translate(-50%, -50%) scale(1);
}

/* --- Contêineres de Elementos --- */
.controls,
.copy-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    justify-content: center;
    margin-top: 10px;
}
.inline-group {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: space-between;
}
.inline-group > div {
    flex: 1;
    min-width: 150px;
}
.title-container {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-bottom: 10px;
}
.title-container input {
    flex: 1;
}

/* --- Output e Mensagens --- */
.output {
    margin-top: 20px;
    padding: 10px;
    border: 1px solid var(--border-color);
    background: var(--input-bg);
    border-radius: 5px;
    white-space: pre-wrap;
    width: 100%;
}
#renewalMessage,
#migrationMessage {
    margin-top: 10px;
    font-weight: bold;
}
#saudacaoDespedidaText {
    text-align: center;
    margin-top: 10px;
    font-size: 0.9em;
}

.customization-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
}

.popup-column {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.popup-label {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: normal;
}

.customization-buttons {
    margin-top: 10px;
}

.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2000;
    backdrop-filter: blur(5px);
}

.modal-content {
    max-width: 400px;
    text-align: center;
}

.modal-buttons {
    display: flex;
    justify-content: space-around;
    margin-top: 20px;
}

/* --- Estilo dos Tooltips --- */
[data-tooltip] {
    position: relative;
}

/* Regra geral para tooltips (acima do elemento) */
[data-tooltip]::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: calc(100% + 5px);
    left: 50%;
    transform: translateX(-50%);
    background-color: var(--icon-color);
    color: #ffffff;
    padding: 6px 12px;
    border-radius: 5px;
    font-size: 12px;
    font-family: var(--font-secondary);
    white-space: nowrap;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.2s;
    z-index: 101;
}

#atendenteToggleBtn[data-tooltip]::after,
#darkModeToggleBtn[data-tooltip]::after {
    bottom: auto;
    top: 50%;
    left: calc(100% + 10px);
    transform: translateY(-50%);
}

[data-tooltip]:hover::after {
    opacity: 1;
}

/* --- Estilo do Indicador de Carregamento --- */
.card-loader {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(42, 42, 42, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
    border-radius: 10px;
}

.light-mode .card-loader {
    background: rgba(255, 255, 255, 0.7);
}

.loader {
    width: 40px;
    height: 40px;
    border: 4px solid #555;
    border-top-color: var(--icon-color, #FFF);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

/* --- Estilos para o Seletor Customizado (Drag and Drop) --- */
.custom-select {
    position: relative;
    width: 100%;
}

.select-selected {
    background-color: var(--input-bg);
    color: var(--text-primary);
    padding: 12px 16px;
    font-size: 16px;
    border: 1px solid var(--border-color);
    border-radius: 5px;
    cursor: pointer;
    user-select: none;
    transition: all 0.2s;
}

.select-selected:hover {
    border-color: var(--icon-color);
}

.select-items {
    position: absolute;
    background-color: var(--input-bg);
    top: 100%;
    left: 0;
    right: 0;
    z-index: 99;
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 5px 5px;
    max-height: 500px;
    overflow-y: auto;
}

.select-hide {
    display: none;
}

.select-items div, .select-items .optgroup-label {
    padding: 4px 16px;
    font-size: 13px;
    cursor: pointer;
    border-bottom: 1px solid var(--border-color);
    transition: background-color 0.2s;
}

.select-items .optgroup-label {
    font-weight: bold;
    color: var(--icon-color);
    cursor: default;
    background-color: rgba(0,0,0,0.1);
}

.select-items div:not(.optgroup-label) {
    padding-left: 25px;
    cursor: grab;
}

.select-items div:hover:not(.optgroup-label) {
    background-color: rgba(0,0,0,0.2);
}

.sortable-ghost {
    opacity: 0.4;
    background-color: var(--icon-color) !important;
}

/* --- Estilos para o Formulário do Modal --- */
.modal-form-group {
    text-align: left;
    margin-bottom: 15px;
}

.modal-form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 14px;
}

.modal-form-group input {
    width: 100%;
}

.category-group {
    border-bottom: 2px solid var(--border-color);
}

.optgroup-label {
    cursor: move !important;
}

.option-item {
    padding-left: 25px;
    cursor: grab;
}

.option-item:hover {
    background-color: rgba(0,0,0,0.2);
}

/* --- Estilos para Autenticação --- */
.auth-toggle-link {
    margin-top: 20px;
    font-size: 14px;
}
.auth-toggle-link a {
    color: var(--icon-color);
    text-decoration: underline;
    cursor: pointer;
}

.user-menu {
    position: absolute;
    bottom: 110px;
    left: 15px;
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    z-index: 101;
    width: 180px;
    padding: 5px;
    transition: opacity 0.2s, transform 0.2s;
}

.user-menu a {
    display: block;
    padding: 10px 15px;
    color: var(--text-primary);
    text-decoration: none;
    font-family: var(--font-secondary);
    font-size: 14px;
    border-radius: 5px;
}

.user-menu a:hover {
    background-color: var(--button-bg);
    color: var(--button-text, #FFF);
}

.popup.success {
    background: var(--success-color);
    color: #FFFFFF;
    box-shadow: 0 0 15px 1px var(--success-color);
}

.popup.error {
    background: var(--error-color);
    color: #FFFFFF;
    box-shadow: 0 0 15px 1px var(--error-color);
}
/* ======================================= */
/* ESTILOS PARA O EDITOR DE MODELOS DE O.S. */
/* ======================================= */

.os-editor-layout {
    display: grid;
    grid-template-columns: 1fr 2fr; /* Coluna da lista com 1/3 e formulário com 2/3 */
    gap: 20px;
}

.os-list {
    max-height: 400px;
    overflow-y: auto;
}

.os-category-header {
    font-weight: bold;
    color: var(--heading-color);
    margin-top: 15px;
    margin-bottom: 8px;
    padding-bottom: 5px;
    border-bottom: 1px solid var(--border-color);
    font-size: 1.1em;
}
.os-category-header:first-child {
    margin-top: 0;
}

.os-list-item {
    padding: 10px;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.2s;
}

.os-list-item:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.os-list-item.active {
    background-color: var(--button-bg);
    color: var(--button-text);
    font-weight: bold;
}
/*=============================================================================*/
/* == TEXTO COPIADOS = */
@font-face {
    font-family: Orbitron;
    font-style: normal;
    font-weight: 400;
    src: url(https://fonts.gstatic.com/s/orbitron/v31/yMJRMIlzdpvBhQQL_Qq7dy0.woff2) format('woff2')            unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}
.password-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
}
.password-grid .card hr {
    margin: 10px 0;
    border-color: rgba(128, 128, 128, 0.2);
}
.copiable {
    cursor: pointer;
    background-color: rgba(255, 255, 255, 0.08);
    padding: 2px 6px;
    border-radius: 4px;
    transition: background-color 0.2s;
    display: inline-block; /* Garante que o fundo se aplique corretamente */
}

.copiable:hover {
    background-color: rgba(255, 255, 255, 0.2);
}

.copiable:active {
    transform: translateY(1px); /* Efeito de clique */
}

// --- assets\css\layout.css ---

/* ==========================================================================
   LAYOUT.CSS - Estrutura principal, sidebar, grid
   ========================================================================== */

/* Contêiner principal */
.chatbox {
    display: flex;
    min-height: 100vh;
}

/* Barra lateral */
.sidebar {
    width: 60px;
    background: var(--sidebar-bg);
    border-right: 1px solid var(--border-color);
    padding: 20px 10px;
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    display: flex;
    flex-direction: column;
    gap: 10px;
    transition: width 0.3s ease, background 0.3s;
    overflow: visible;
    z-index: 100;
}

.sidebar.expanded {
    width: 200px;
}

/* Conteúdo principal */
.content {
    margin-left: 80px;
    padding: 20px;
    flex: 1;
    transition: margin-left 0.3s ease;
    display: flex;
    justify-content: center;
}

.sidebar.expanded ~ .content {
    margin-left: 220px;
}

/* Grid de duas colunas */
.dual-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    width: 100%;
    align-items: start;
}

@media (max-width: 800px) {
    .dual-grid {
        grid-template-columns: 1fr;
    }
    .content {
        margin-left: 80px;
        padding: 10px;
    }
    .sidebar.expanded ~ .content {
        margin-left: 220px;
    }
}

// --- assets\css\main.css ---

/* ==========================================================================
   MAIN.CSS - Ponto de entrada principal
   ========================================================================== */

/* 1. Importa os módulos de estilo */
@import url('themes.css');
@import url('layout.css');
@import url('components.css');

/* 2. Regras Globais e Resets */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: var(--font-secondary);
    background: var(--bg-gradient);
    color: var(--text-primary);
    transition: background-color 0.3s, color 0.3s;
    min-height: 100vh;
}

h1, h2, h3, h4 {
    font-family: var(--font-primary);
    color: var(--heading-color);
    text-align: center;
    margin-bottom: 1rem;
}

// --- assets\css\themes.css ---

/* ==========================================================================
   THEMES.CSS - Variáveis de cores, fontes e temas
   ========================================================================== */

:root {
    /* Fontes */
    --font-primary: 'Orbitron', sans-serif;
    --text-primary: #1A3C5A;
    --font-secondary: Arial, sans-serif;
    --bg-gradient: linear-gradient(135deg, #E5F0F8 0%, #D1E0F0 100%);
    --card-bg: linear-gradient(135deg, #FFFFFF 0%, #F5F7FA 100%);
    --sidebar-bg: linear-gradient(180deg, #E5F0F8 0%, #D1E0F0 100%);
    --input-bg: #FFFFFF;
    --switch-bg: linear-gradient(180deg, #CCCCCC 0%, #AAAAAA 100%);
    --switch-bg-checked: linear-gradient(180deg, #FF416C 0%, #FF4B2B 100%);
}

.dark-mode {
    /* Cores do Tema Escuro */
    --bg-gradient: linear-gradient(135deg, #2A2A2A 0%, #1A1A1A 100%);
    --card-bg: linear-gradient(135deg, #2A2A2A 0%, #1A1A1A 100%);
    --sidebar-bg: linear-gradient(180deg, #2A2A2A 0%, #1A1A1A 100%);
    --text-primary: #D1D5DB;
    --input-bg: #2A2A2A;
    --switch-bg: linear-gradient(180deg, #555555 0%, #333333 100%); /* Gradiente cinza-escuro para 'desligado' */
    --switch-bg-checked: linear-gradient(180deg, #FF0000 0%, #B30000 100%); /* Gradiente vermelho-escuro para 'ligado' */
}

/* Efeito Neon (controlado pela classe .no-neon no body) */
.card, .upload-card, .customization-popup, .popup {
    box-shadow: 0 0 15px 1px var(--shadow-color), 0 4px 8px rgba(0,0,0,0.2);
}
.button, .copy-btn, .file-label {
    box-shadow: 0 0 10px 0px var(--shadow-color), 0 2px 4px rgba(0,0,0,0.2);
}
input:focus, select:focus, textarea:focus {
    box-shadow: 0 0 10px 2px var(--shadow-color);
}
.sidebar-button.active {
    box-shadow: 0 0 15px 2px var(--shadow-color);
}

/* Desativa o neon */
.no-neon .card,
.no-neon .upload-card,
.no-neon .customization-popup,
.no-neon .popup,
.no-neon .button,
.no-neon .copy-btn,
.no-neon .file-label,
.no-neon input:focus,
.no-neon select:focus,
.no-neon textarea:focus,
.no-neon .sidebar-button.active {
    box-shadow: none;
}

// --- assets\js\admin.js ---

import { initializeFirebase, checkAuthState, loadAtendentes, updateUserRole, updateUserStatus } from './firebase.js';
import { showPopup } from './ui.js';

document.addEventListener('DOMContentLoaded', () => {
    
    // --- SELETORES GERAIS ---
    const userListBody = document.getElementById('userListBody');
    const loader = document.getElementById('adminLoader');
    const mainContent = document.getElementById('mainContent');
    let loadedAtendentes = {}; // Armazena os atendentes carregados para reutilização

    initializeFirebase();

    // --- LÓGICA DE GERENCIAMENTO DE USUÁRIOS ---
    const populateUserTable = (allAtendentes, currentAdminUid) => {
        userListBody.innerHTML = '';
        Object.entries(allAtendentes).forEach(([username, data]) => {
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>${username}</td>
                <td>${data.nomeCompleto || 'N/A'}</td>
                <td>
                    <select data-username="${username}" ${data.uid === currentAdminUid ? 'disabled' : ''}>
                        <option value="usuario" ${data.role === 'usuario' ? 'selected' : ''}>Usuário</option>
                        <option value="admin" ${data.role === 'admin' ? 'selected' : ''}>Admin</option>
                    </select>
                </td>
                <td>
                    <button class="${data.status === 'inativo' ? 'button' : 'button back'}" data-username="${username}" data-current-status="${data.status || 'ativo'}" ${data.uid === currentAdminUid ? 'disabled' : ''}>
                        ${data.status === 'inativo' ? 'Ativar' : 'Desativar'}
                    </button>
                </td>
            `;
            
            if (data.status === 'inativo') {
                row.style.opacity = '0.5';
            }
            userListBody.appendChild(row);
        });
    };

    // --- FLUXO PRINCIPAL E EVENTOS DE GERENCIAMENTO ---
    loader.style.display = 'flex';
    mainContent.style.display = 'none';

    checkAuthState(async (user) => {
        if (user) {
            loadedAtendentes = await loadAtendentes(); // Carrega e armazena os atendentes
            const adminKey = Object.keys(loadedAtendentes).find(key => loadedAtendentes[key].uid === user.uid);
            
            if (adminKey && loadedAtendentes[adminKey].role === 'admin') {
                populateUserTable(loadedAtendentes, user.uid);
                loader.style.display = 'none';
                mainContent.style.display = 'block';
            } else {
                alert("Acesso negado. Você não tem permissão para ver esta página.");
                window.location.href = 'index.html';
            }
        } else {
            alert("Você precisa estar logado para acessar esta página.");
            window.location.href = 'index.html';
        }
    });

    userListBody.addEventListener('click', async (e) => {
        if (e.target.tagName === 'BUTTON' && e.target.dataset.username) {
            const button = e.target;
            const username = button.dataset.username;
            const newStatus = button.dataset.currentStatus === 'ativo' ? 'inativo' : 'ativo';
            try {
                await updateUserStatus(username, newStatus);
                showPopup(`Usuário ${username} foi ${newStatus === 'ativo' ? 'ativado' : 'desativado'}.`, 'success');
                // Recarrega os dados para atualizar a UI de forma consistente
                loadedAtendentes = await loadAtendentes();
                const currentUser = auth.currentUser;
                populateUserTable(loadedAtendentes, currentUser.uid);
            } catch (error) {
                showPopup(`Erro ao atualizar status: ${error.message}`, 'error');
            }
        }
    });

    userListBody.addEventListener('change', async (e) => {
        if (e.target.tagName === 'SELECT') {
            const username = e.target.dataset.username;
            const newRole = e.target.value;
            try {
                await updateUserRole(username, newRole);
                showPopup(`Permissão de ${username} atualizada para ${newRole}.`, 'success');
            } catch (error) {
                showPopup(`Erro ao atualizar permissão: ${error.message}`, 'error');
            }
        }
    });


    // --- LÓGICA PARA O VERIFICADOR DE USUÁRIOS ÓRFÃOS ---
    const checkerStep1 = document.getElementById('checkerStep1');
    const checkerStep2 = document.getElementById('checkerStep2');
    const checkerResults = document.getElementById('checkerResults');
    const loadValidUsersBtn = document.getElementById('loadValidUsersBtn');
    const compareBtn = document.getElementById('compareBtn');
    const pasteArea = document.getElementById('authPasteArea');
    const orphanList = document.getElementById('orphanList');
    let validUIDs = new Set();

    loadValidUsersBtn.addEventListener('click', () => {
        // Reutiliza a lista de atendentes já carregada
        Object.values(loadedAtendentes).forEach(data => {
            if (data.uid) validUIDs.add(data.uid);
        });
        
        alert(`${validUIDs.size} usuários válidos encontrados no banco de dados.`);
        checkerStep1.classList.add('hidden');
        checkerStep2.classList.remove('hidden');
    });

    compareBtn.addEventListener('click', () => {
        const pastedText = pasteArea.value;
        if (!pastedText.trim()) return alert("Por favor, cole os dados do painel de autenticação.");

        const lineRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})\s+([a-zA-Z0-9]{28})/g;
        let match;
        const orphans = [];

        while ((match = lineRegex.exec(pastedText)) !== null) {
            const email = match[1];
            const uid = match[2];
            if (!validUIDs.has(uid)) {
                orphans.push({ email, uid });
            }
        }

        orphanList.innerHTML = '';
        if (orphans.length > 0) {
            orphans.forEach(orphan => {
                const li = document.createElement('li');
                li.innerHTML = `<span class="orphan">[ÓRFÃ]</span> Email: ${orphan.email} | UID: ${orphan.uid}`;
                orphanList.appendChild(li);
});
        } else {
            orphanList.innerHTML = '<li><span class="valid">[OK] Nenhuma conta órfã encontrada!</span></li>';
        }
        checkerResults.classList.remove('hidden');
    });
});

// --- assets\js\app.js ---

import { initializeUI, showSection, updateGreeting, showPopup } from './ui.js';
import {
    initializeFirebase,
    loadDataForAttendant,
    loadOsTemplatesForAttendant,
    loadAtendentes,
    loginUser,
    loginWithUsername,
    logoutUser,
    checkAuthState,
    createUserAccount,
    updateUserPassword,
    updateUserFullName
} from './firebase.js';
import { initializeTheme } from './theme.js';
import { initializeChat } from './chat.js';
import { osEditorModule, initializeOsEditor } from './os-editor.js';
import { initializeConversor } from './conversor.js';

document.addEventListener('DOMContentLoaded', async () => {
    // --- 1. INICIALIZAÇÃO E SELETORES ---
    initializeUI();
    initializeTheme();
    initializeOsEditor(); // <-- CHAMADA DE VOLTA AO LOCAL CORRETO
    initializeConversor();
    initializeFirebase();
    const chatModule = initializeChat();

    let currentUsername = null;

    // Seletores da interface
    const authOverlay = document.getElementById('auth-overlay');
    const loginForm = document.getElementById('login-form');
    const registerForm = document.getElementById('register-form');
    const mainContent = document.querySelector('.chatbox');
    const sidebar = document.querySelector('.sidebar');
    const atendenteToggleBtn = document.getElementById('atendenteToggleBtn');
    const chatLoader = document.getElementById('chatLoader');
    const profileModal = document.getElementById('profileModal');
    const updateFullNameForm = document.getElementById('update-fullname-form');
    const updatePasswordForm = document.getElementById('update-password-form');
    const modalLogoutBtn = document.getElementById('modalLogoutBtn');
    const modalCloseProfileBtn = document.getElementById('modalCloseProfileBtn');
    const adminLinkContainer = document.getElementById('admin-link-container');
    const newFullNameInput = document.getElementById('newFullName');
    const profileUsernameSpan = document.getElementById('profileUsername');

    // --- 2. DEFINIÇÃO DAS FUNÇÕES PRINCIPAIS ---
    const startApp = async (user, allAtendentes) => {
        const attendantKey = Object.keys(allAtendentes).find(key => allAtendentes[key].uid === user.uid);
        if (!attendantKey) {
            showPopup("Não foi possível carregar os dados do seu perfil. Por favor, faça o login novamente.", 'error');
            await logoutUser();
            return;
        }
        currentUsername = attendantKey;
        authOverlay.style.display = 'none';
        mainContent.style.display = 'flex';
        sidebar.style.display = 'flex';
        const attendantData = allAtendentes[attendantKey];
        if (attendantData.status === 'inativo') {
            showPopup("Sua conta foi desativada.", 'error');
            await logoutUser();
            return;
        }
        if (atendenteToggleBtn) {
            const atendenteTextSpan = atendenteToggleBtn.querySelector('.text');
            if (atendenteTextSpan) atendenteTextSpan.textContent = attendantKey.charAt(0).toUpperCase() + attendantKey.slice(1);
        }
        localStorage.setItem("atendenteAtual", attendantKey);
        if (newFullNameInput) newFullNameInput.value = attendantData.nomeCompleto;
        if (profileUsernameSpan) profileUsernameSpan.textContent = attendantKey;
        if (adminLinkContainer) adminLinkContainer.style.display = attendantData.role === 'admin' ? 'block' : 'none';
        chatLoader.style.display = 'flex';
        try {
            const chatData = await loadDataForAttendant(attendantKey);
            const osData = await loadOsTemplatesForAttendant(attendantKey);
            chatModule.setResponses(chatData);
            osEditorModule.setTemplates(osData, attendantKey);
        } catch (error) {
            console.error("Erro ao carregar dados:", error);
            showPopup("Não foi possível carregar suas respostas.", "error");
        } finally {
            chatLoader.style.display = 'none';
        }
        updateGreeting(attendantKey);
        setInterval(() => updateGreeting(currentUsername), 60000);
    };

    const showLoginScreen = () => {
        mainContent.style.display = 'none';
        sidebar.style.display = 'none';
        authOverlay.style.display = 'flex';
        currentUsername = null;
    };

    // --- 3. FLUXO DE EXECUÇÃO PRINCIPAL ---
    try {
        checkAuthState(async (user) => {
            if (user) {
                const allAtendentes = await loadAtendentes();
                await startApp(user, allAtendentes);
            } else {
                showLoginScreen();
            }
        });
    } catch (error) {
        console.error("Erro fatal na inicialização:", error);
        showPopup("Não foi possível iniciar a aplicação.", "error");
        showLoginScreen();
    }

    // --- 4. EVENT LISTENERS DA INTERFACE ---

    // Listener para os botões da barra lateral (versão simples e correta)
    document.querySelectorAll('.sidebar-button[data-section]').forEach(button => {
        button.addEventListener('click', () => {
            showSection(button.dataset.section, currentUsername);
        });
    });

    if (atendenteToggleBtn) atendenteToggleBtn.addEventListener('click', () => { profileModal.style.display = 'flex'; });
    if (modalCloseProfileBtn) modalCloseProfileBtn.addEventListener('click', () => { profileModal.style.display = 'none'; });
    if (modalLogoutBtn) modalLogoutBtn.addEventListener('click', async () => { try { await logoutUser(); profileModal.style.display = 'none'; } catch (error) { showPopup("Erro ao fazer logout: " + error.message, 'error'); } });
    if (updateFullNameForm) {
        updateFullNameForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const newFullName = newFullNameInput.value;
            if (!newFullName.trim()) return showPopup("O nome não pode estar em branco.", 'error');
            if (!currentUsername) return showPopup("Erro: Usuário não identificado.", 'error');
            try {
                await updateUserFullName(currentUsername, newFullName);
                showPopup("Nome alterado com sucesso!", 'success');
                profileModal.style.display = 'none';
            } catch (error) {
                showPopup("Erro ao alterar o nome: " + error.message, 'error');
            }
        });
    }
    if (updatePasswordForm) {
        updatePasswordForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const newPassword = document.getElementById('newPassword').value;
            if (newPassword.length < 6) return showPopup("A nova senha deve ter pelo menos 6 caracteres.", 'error');
            try {
                await updateUserPassword(newPassword);
                showPopup("Senha alterada com sucesso!", 'success');
                document.getElementById('newPassword').value = '';
                profileModal.style.display = 'none';
            } catch (error) {
                showPopup("Erro ao alterar senha: " + error.message, 'error');
            }
        });
    }
    if (loginForm) {
        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const identifier = document.getElementById('loginIdentifier').value;
            const password = document.getElementById('loginPassword').value;
            try {
                if (identifier.includes('@')) {
                    await loginUser(identifier, password);
                } else {
                    await loginWithUsername(identifier, password);
                }
            } catch (error) {
                let friendlyMessage = "Ocorreu um erro.";
                if (error.code === 'auth/invalid-login-credentials') {
                    friendlyMessage = "Usuário, e-mail ou senha incorretos.";
                }
                showPopup(friendlyMessage, 'error');
            }
        });
    }
    if (registerForm) {
        registerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userDetails = {
                username: document.getElementById('registerUsername').value,
                fullName: document.getElementById('registerFullName').value,
                email: document.getElementById('registerEmail').value,
                password: document.getElementById('registerPassword').value,
            };
            if (!userDetails.username || !userDetails.fullName) return showPopup("Todos os campos são obrigatórios.", 'error');
            try {
                const { userCredential, sanitizedUsername, newAtendenteData } = await createUserAccount(userDetails);
                const allAtendentes = await loadAtendentes();
                allAtendentes[sanitizedUsername] = newAtendenteData;
                await startApp(userCredential.user, allAtendentes);
            } catch (error) {
                let friendlyMessage = "Ocorreu um erro desconhecido.";
                if (error.code === 'auth/email-already-in-use') friendlyMessage = "Este e-mail já está cadastrado.";
                else if (error.code === 'auth/weak-password') friendlyMessage = "A senha é muito fraca.";
                else if (error.message.includes('Este nome de usuário já pode estar em uso')) friendlyMessage = "Este nome de usuário já está em uso.";
                showPopup("Erro no registro: " + friendlyMessage, 'error');
            }
        });
    }
    const showRegisterBtn = document.getElementById('show-register');
    if (showRegisterBtn) showRegisterBtn.addEventListener('click', (e) => { e.preventDefault(); loginForm.style.display = 'none'; registerForm.style.display = 'block'; });
    const showLoginBtn = document.getElementById('show-login');
    if (showLoginBtn) showLoginBtn.addEventListener('click', (e) => { e.preventDefault(); registerForm.style.display = 'none'; loginForm.style.display = 'block'; });
    document.addEventListener('click', (e) => {
        if (profileModal && atendenteToggleBtn && !atendenteToggleBtn.contains(e.target) && !profileModal.contains(e.target)) {
            profileModal.style.display = 'none';
        }
    });
    document.addEventListener('click', (e) => {
        const copiableElement = e.target.closest('.copiable');
        if (copiableElement) {
            navigator.clipboard.writeText(copiableElement.textContent).then(() => {
                showPopup(`'${copiableElement.textContent}' copiado!`, 'success');
            }).catch(err => {
                console.error('Erro ao copiar:', err);
                showPopup('Não foi possível copiar.', 'error');
            });
        }
    });
});

// --- assets\js\bridge.js ---

// bridge.js

console.log("ATI Extensão [Ponte]: Script da ponte carregado no site-painel.");

// A cada 2 segundos, esta função verifica se o usuário fez login no site
setInterval(() => {
    // Lê o 'atendenteAtual' que o app.js do site salvou no localStorage
    const attendantKey = localStorage.getItem('atendenteAtual');

    if (attendantKey) {
        // Verifica no armazenamento da extensão se o valor já é o mesmo
        chrome.storage.local.get('atendenteAtual', (data) => {
            if (data.atendenteAtual !== attendantKey) {
                // Se for diferente (ou não existir), salva o novo valor
                chrome.storage.local.set({ atendenteAtual: attendantKey }, () => {
                    console.log(`[Ponte] Atendente '${attendantKey}' foi salvo para a extensão.`);
                });
            }
        });
    }
}, 2000);

// --- assets\js\chat.js ---

import { showPopup, adjustTextareaHeight, replacePlaceholders } from './ui.js';
import { saveDataForAttendant } from './firebase.js';

export function initializeChat() {
    // 'respostas' agora guardará a lista COMPLETA (quick replies + modelos de o.s.)
    let respostas = [];
    let currentSelection = { value: "", text: "Selecione uma resposta" };
    let sortableInstances = [];

    const elements = {
        selectDisplay: document.getElementById('select-display'),
        selectItems: document.getElementById('select-items'),
        response: document.getElementById('resposta'),
        title: document.getElementById('titulo'),
        titleContainer: document.getElementById('titleContainer'),
        copyBtn: document.getElementById('copyBtn'),
        editTitleBtn: document.getElementById('editTitleBtn'),
        saveEditBtn: document.getElementById('saveEditBtn'),
        deleteBtn: document.getElementById('deleteBtn'),
        addBtn: document.getElementById('addBtn'),
        saveTitleBtn: document.getElementById('saveTitleBtn'),
    };

    const getCurrentAttendant = () => localStorage.getItem('atendenteAtual');

    const updateResponseSelector = () => {
        elements.selectItems.innerHTML = '';

        // ## CORREÇÃO DE EXIBIÇÃO ##
        // Filtra a lista completa para pegar apenas os quick_replies para mostrar no chat
        const quickReplies = respostas.filter(r => r.category === 'quick_reply');

        if (quickReplies.length === 0) {
            elements.selectDisplay.textContent = 'Nenhuma resposta encontrada';
            return;
        }

        // Agrupa por categoria apenas os quick_replies
        const groupedByCategory = quickReplies.reduce((acc, template) => {
            const category = template.subCategory || 'Geral';
            if (!acc[category]) {
                acc[category] = [];
            }
            acc[category].push(template);
            return acc;
        }, {});

        sortableInstances.forEach(sortable => sortable.destroy());
        sortableInstances = [];

        for (const categoryName in groupedByCategory) {
            const categoryGroup = document.createElement("div");
            categoryGroup.className = 'category-group';
            const optgroup = document.createElement("div");
            optgroup.className = 'optgroup-label';
            optgroup.textContent = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);
            categoryGroup.appendChild(optgroup);
            const optionsContainer = document.createElement("div");
            optionsContainer.className = 'options-container';
            optionsContainer.dataset.categoryName = categoryName;

            groupedByCategory[categoryName].forEach(template => {
                const opt = document.createElement("div");
                opt.className = 'option-item';
                opt.textContent = template.title;
                // IMPORTANTE: o data-value continua sendo o índice do item na lista COMPLETA ('respostas')
                opt.dataset.value = respostas.indexOf(template);
                opt.addEventListener('click', () => {
                    currentSelection = { value: opt.dataset.value, text: opt.textContent };
                    elements.selectDisplay.textContent = opt.textContent;
                    elements.selectItems.classList.add('select-hide');
                    displaySelectedResponse();
                });
                optionsContainer.appendChild(opt);
            });
            categoryGroup.appendChild(optionsContainer);
            elements.selectItems.appendChild(categoryGroup);
        }

        // Inicializa o Sortable para os itens dentro de cada categoria
        elements.selectItems.querySelectorAll('.options-container').forEach(container => {
            const sortable = Sortable.create(container, {
                group: 'shared-options',
                animation: 150,
                ghostClass: 'sortable-ghost',
                onEnd: (evt) => {
                    const itemEl = evt.item;
                    const originalIndex = parseInt(itemEl.dataset.value, 10);
                    const newCategoryName = evt.to.dataset.categoryName;
                    if (respostas[originalIndex] && newCategoryName) {
                        respostas[originalIndex].subCategory = newCategoryName;
                    }
                    saveOrderAndCategories();
                },
            });
            sortableInstances.push(sortable);
        });

        // Inicializa o Sortable para reordenar as categorias inteiras
        Sortable.create(elements.selectItems, {
            handle: '.optgroup-label',
            animation: 150,
            ghostClass: 'sortable-ghost',
            onEnd: () => saveOrderAndCategories(),
        });
    };

    // ## CORREÇÃO DE SALVAMENTO ##
    const saveOrderAndCategories = () => {
        const attendant = getCurrentAttendant();
        if (!attendant) return;

        // 1. Pega a nova ordem dos quick_replies a partir dos elementos visíveis no DOM
        const newOrderedQuickReplies = [];
        elements.selectItems.querySelectorAll('.option-item').forEach(item => {
            const originalIndex = parseInt(item.dataset.value, 10);
            if (respostas[originalIndex]) {
                newOrderedQuickReplies.push(respostas[originalIndex]);
            }
        });

        // 2. Pega todos os modelos de O.S. que não estão visíveis, para não perdê-los
        const osTemplates = respostas.filter(r => r.category !== 'quick_reply');

        // 3. Junta as duas listas: os quick_replies reordenados + os modelos de O.S. intactos
        const fullDataToSave = [...newOrderedQuickReplies, ...osTemplates];

        // 4. Atualiza o estado local e salva a lista COMPLETA no Firebase
        respostas = fullDataToSave;
        saveDataForAttendant(attendant, respostas).then(() => {
            updateResponseSelector();
            showPopup("Ordem e categoria salvas!", 'success');
        }).catch(error => {
            showPopup("Erro ao salvar as alterações.", 'error');
            console.error("Erro no Firebase:", error);
        });
    };

    const displaySelectedResponse = () => {
        const selectedIndex = currentSelection.value;
        if (selectedIndex === "") {
            elements.response.value = "Selecione uma opção para ver a mensagem.";
        } else {
            const template = respostas[parseInt(selectedIndex)];
            elements.response.value = template ? template.text : "Resposta não encontrada.";
        }
        adjustTextareaHeight(elements.response);
        elements.titleContainer.style.display = 'none';
    };

    const saveChanges = () => {
        const attendant = getCurrentAttendant();
        const selectedIndex = currentSelection.value;
        if (!attendant || selectedIndex === "") return showPopup("Selecione uma resposta para salvar.");
        respostas[parseInt(selectedIndex)].text = elements.response.value.trim();
        saveDataForAttendant(attendant, respostas);
        showPopup("Resposta salva com sucesso!", 'success');
    };

    const deleteResponse = () => {
        const attendant = getCurrentAttendant();
        const selectedIndex = currentSelection.value;
        if (!attendant || selectedIndex === "") return showPopup("Selecione uma resposta para apagar.");
        const modal = document.getElementById('confirmationModal');
        document.getElementById('modalTitle').textContent = 'Apagar Resposta';
        document.getElementById('modalMessage').textContent = 'Tem certeza que deseja apagar esta resposta permanentemente?';
        const confirmBtn = document.getElementById('modalConfirmBtn');
        const cancelBtn = document.getElementById('modalCancelBtn');
        modal.style.display = 'flex';
        const onConfirm = () => {
            respostas.splice(parseInt(selectedIndex), 1);
            saveDataForAttendant(attendant, respostas).then(() => {
                currentSelection = { value: "", text: "Selecione uma resposta" };
                updateResponseSelector();
                displaySelectedResponse();
                showPopup("Resposta apagada com sucesso!");
            });
            modal.style.display = 'none';
        };
        const onCancel = () => {
            confirmBtn.removeEventListener('click', onConfirm);
            cancelBtn.removeEventListener('click', onCancel);
            modal.style.display = 'none';
        };
        confirmBtn.addEventListener('click', onConfirm, { once: true });
        cancelBtn.addEventListener('click', onCancel, { once: true });
    };

    const addNewResponse = () => {
        const attendant = getCurrentAttendant();
        if (!attendant) return showPopup("Selecione um atendente primeiro.");
        const modal = document.getElementById('addResponseModal');
        const titleInput = document.getElementById('newResponseTitle');
        const categoryInput = document.getElementById('newResponseCategory');
        const saveBtn = document.getElementById('modalSaveNewBtn');
        const cancelBtn = document.getElementById('modalCancelNewBtn');
        titleInput.value = '';
        categoryInput.value = '';
        modal.style.display = 'flex';
        titleInput.focus();
        const onSave = () => {
            const title = titleInput.value.trim();
            if (!title) return showPopup("O título não pode estar em branco.");
            let categoryName = categoryInput.value.trim() || 'Geral';
            const newTemplate = {
                title: title,
                text: "Nova resposta. Edite aqui e clique em Salvar.",
                category: "quick_reply",
                subCategory: categoryName,
                keywords: []
            };
            respostas.push(newTemplate);
            saveDataForAttendant(attendant, respostas).then(() => {
                currentSelection = { value: (respostas.length - 1).toString(), text: title };
                updateResponseSelector();
                displaySelectedResponse();
                showPopup("Nova resposta adicionada!");
                modal.style.display = 'none';
            });
        };
        const onCancel = () => {
            saveBtn.removeEventListener('click', onSave);
            cancelBtn.removeEventListener('click', onCancel);
            modal.style.display = 'none';
        };
        saveBtn.addEventListener('click', onSave, { once: true });
        cancelBtn.addEventListener('click', onCancel, { once: true });
    };

    const editTitle = () => {
        const selectedIndex = currentSelection.value;
        if (selectedIndex === "") return showPopup("Selecione uma resposta para editar o título.");
        const template = respostas[parseInt(selectedIndex)];
        if (template) {
            elements.title.value = template.title;
            elements.titleContainer.style.display = 'flex';
            elements.title.focus();
        }
    };

    const saveNewTitle = () => {
        const attendant = getCurrentAttendant();
        const selectedIndex = currentSelection.value;
        if (selectedIndex === "" || !attendant) return;
        const newTitle = elements.title.value.trim();
        if (!newTitle) return showPopup("O título não pode estar em branco.");
        respostas[parseInt(selectedIndex)].title = newTitle;
        saveDataForAttendant(attendant, respostas).then(() => {
            currentSelection.text = newTitle;
            updateResponseSelector();
            displaySelectedResponse();
            showPopup("Título alterado com sucesso!");
        });
    };

    // --- Event Listeners ---
    elements.selectDisplay.addEventListener('click', () => elements.selectItems.classList.toggle('select-hide'));
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.custom-select')) elements.selectItems.classList.add('select-hide');
    });
    elements.response.addEventListener('input', () => adjustTextareaHeight(elements.response));
    elements.copyBtn.addEventListener('click', () => {
        const rawText = elements.response.value;
        const processedText = replacePlaceholders(rawText);
        navigator.clipboard.writeText(processedText).then(() => showPopup('Texto copiado!'));
    });
    elements.saveEditBtn.addEventListener('click', saveChanges);
    elements.addBtn.addEventListener('click', addNewResponse);
    elements.deleteBtn.addEventListener('click', deleteResponse);
    elements.editTitleBtn.addEventListener('click', editTitle);
    elements.saveTitleBtn.addEventListener('click', saveNewTitle);

    // --- API PÚBLICA DO MÓDULO ---
    return {
        setResponses: (data) => {
            respostas = Array.isArray(data) ? data : [];
            currentSelection = { value: "", text: "Selecione uma resposta" };
            updateResponseSelector();
            displaySelectedResponse();
        }
    };
}

// --- assets\js\conversor.js ---

import { showPopup, replacePlaceholders } from './ui.js';

// Define o worker do PDF.js para o módulo
pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

// --- Funções Auxiliares do Módulo ---

function formatAddress(fullAddress) {
    if (!fullAddress || typeof fullAddress !== 'string') return 'N/A';
    // Exemplo de entrada: "RUA YEDA,781, TIJUCA, 25975-560, TERESOPOLIS/RJ."
    const parts = fullAddress.split(','); // ["RUA YEDA", "781", " TIJUCA", ...]
    if (parts.length < 3) return fullAddress; // Retorna o original se o formato for inesperado

    // 1. Pega as 3 primeiras partes: "RUA YEDA,781, TIJUCA"
    let address = parts.slice(0, 3).join(',');
    // 2. Substitui a primeira vírgula por um espaço: "RUA YEDA 781, TIJUCA"
    address = address.replace(',', ' ');
    return address.trim();
}

function formatPhone(phone) {
    const cleaned = phone.replace(/\D/g, '');
    const isValid = /^[1-9]{2}(9?\d{8})$/.test(cleaned);
    let formatted = cleaned;
    if (isValid) {
        if (cleaned.length === 10) { // Fixo
            formatted = `${cleaned.slice(0, 2)} ${cleaned.slice(2, 6)}-${cleaned.slice(6)}`;
        } else if (cleaned.length === 11) { // Celular
            formatted = `${cleaned.slice(0, 2)} ${cleaned.slice(2, 7)}-${cleaned.slice(7)}`;
        }
    }
    return { formatted, isValid };
}

function formatDate(dateStr) {
    if (!dateStr) return '';
    const [year, month, day] = dateStr.split('-');
    return `${day}/${month}`;
}

// --- Função Principal de Inicialização ---

export function initializeConversor() {
    let pdfData = {};
    let osTextData = { withdrawal: '', installation: '', os: '' };

    const elements = {
        uploadSection: document.getElementById('uploadSection'),
        dataSection: document.getElementById('dataSection'),
        withdrawalSection: document.getElementById('withdrawalSection'),
        copyButtons: document.getElementById('copyButtons'),
        contratoSpan: document.getElementById('contratoSpan'),
        contrato: document.getElementById('contrato'),
        nome: document.getElementById('nome'),
        oldAddress: document.getElementById('oldAddress'),
        newAddress: document.getElementById('newAddress'),
        fileName: document.getElementById('fileName'),
        phoneError: document.getElementById('phoneError'),
        renewalMessage: document.getElementById('renewalMessage'),
        migrationMessage: document.getElementById('migrationMessage'),
        output: document.getElementById('output'),
        pdfUpload: document.getElementById('pdfUpload'),
        phone: document.getElementById('phone'),
        equipmentType: document.getElementById('equipmentType'),
        withdrawalDate: document.getElementById('withdrawalDate'),
        withdrawalPeriod: document.getElementById('withdrawalPeriod'),
        installationDate: document.getElementById('installationDate'),
        installationPeriod: document.getElementById('installationPeriod'),
        taxValue: document.getElementById('taxValue'),
        signature: document.getElementById('signature'),
        selfWithdrawal: document.getElementById('selfWithdrawal'),
        renewal: document.getElementById('renewal'),
        migration: document.getElementById('migration'),
        carrierSection: document.getElementById('carrierSection'), // ADICIONAR
        oldCarrier: document.getElementById('oldCarrier'), 
        loadPdfBtn: document.getElementById('loadPdfBtn'),
        generateOsBtn: document.getElementById('generateOsBtn'),
        backToUploadBtn: document.getElementById('backToUploadBtn'),
        copyWithdrawalBtn: document.getElementById('copyWithdrawalBtn'),
        copyInstallationBtn: document.getElementById('copyInstallationBtn'),
        copyOsBtn: document.getElementById('copyOsBtn'),
    };

    const setMinDates = () => {
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        const minDate = tomorrow.toISOString().split('T')[0];
        elements.withdrawalDate.min = minDate;
        elements.installationDate.min = minDate;
    };

    const updateInstallationMinDate = () => {
        if (!elements.selfWithdrawal.checked && elements.withdrawalDate.value) {
            elements.installationDate.min = elements.withdrawalDate.value;
        } else {
            setMinDates();
        }
    };

    const updateTaxLogic = () => {
        const isExempt = elements.renewal.checked || elements.migration.checked;
        elements.taxValue.disabled = isExempt;
        elements.renewalMessage.style.display = elements.renewal.checked ? 'block' : 'none';
        elements.migrationMessage.style.display = elements.migration.checked ? 'block' : 'none';
        elements.carrierSection.style.display = elements.migration.checked ? 'block' : 'none';
        elements.taxValue.value = isExempt ? 'isento' : '100';
    };
    
    const handleCheckboxExclusion = (event) => {
        const { id, checked } = event.target;
        if (id === 'renewal') {
            elements.migration.disabled = checked;
        } else if (id === 'migration') {
            elements.renewal.disabled = checked;
        }
    };

    const resetForm = () => {
        pdfData = {};
        osTextData = { withdrawal: '', installation: '', os: '' };
        elements.dataSection.style.display = 'none';
        elements.uploadSection.style.display = 'block';
        elements.pdfUpload.value = '';
        elements.fileName.textContent = 'Nenhum arquivo selecionado';
        elements.output.textContent = '';
        elements.phone.value = '';
        elements.phoneError.textContent = '';
        elements.copyButtons.style.display = 'none';
        elements.renewal.checked = false;
        elements.carrierSection.style.display = 'none';
        elements.oldCarrier.value = 'none';
        elements.migration.checked = false;
        elements.selfWithdrawal.checked = false;
        elements.migration.disabled = false;
        elements.renewal.disabled = false;
        updateTaxLogic();
    };

    async function handlePdfLoad() {
        const file = elements.pdfUpload.files[0];
        if (!file) return showPopup('Por favor, selecione um arquivo PDF.');
        
        try {
            const arrayBuffer = await file.arrayBuffer();
            const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;
            const text = (await (await pdf.getPage(1)).getTextContent()).items.map(item => item.str).join(' ');

            // --- LÓGICA DE EXTRAÇÃO CORRIGIDA USANDO SUA REGEX ORIGINAL E FUNCIONAL ---

            // Esta é a expressão regular correta do seu código original, que busca duas linhas de endereço.
            const oldAddressRegex = /2 - Sobre o\(s\) antigo\(s\) endereco\(s\) de cobrança e instalação\s+([\s\S]*? \/ RJ\.)\s+([\s\S]*? \/ RJ\.)/;
            const newAddressRegex = /3 - Sobre o\(s\) novo\(s\) endereco\(s\) de cobrança e instalação\s+([\s\S]*? \/ RJ\.)\s+([\s\S]*? \/ RJ\.)/;

            pdfData.contrato = text.match(/Aditivo do Contrato (\d+)/)?.[1] || 'N/A';
            pdfData.nomeCompleto = text.match(/CONTRATADA e ([\s\S]*?),/)?.[1].trim() || 'N/A';
            pdfData.primeiroNome = pdfData.nomeCompleto.split(' ')[0].toUpperCase();
            
            // Acessamos o grupo [2], que é o segundo endereço capturado, exatamente como no seu código.
            const rawOldAddress = oldAddressRegex.exec(text)?.[2].trim().toUpperCase();
            const rawNewAddress = newAddressRegex.exec(text)?.[2].trim().toUpperCase();

            pdfData.oldAddress = formatAddress(rawOldAddress) || 'Endereço antigo não encontrado';
            pdfData.newAddress = formatAddress(rawNewAddress) || 'Endereço novo não encontrado';

            // Preenche a UI com os dados
            elements.contratoSpan.textContent = pdfData.contrato;
            elements.contrato.textContent = pdfData.contrato;
            elements.nome.textContent = pdfData.nomeCompleto;
            elements.oldAddress.textContent = pdfData.oldAddress;
            elements.newAddress.textContent = pdfData.newAddress;

            elements.uploadSection.style.display = 'none';
            elements.dataSection.style.display = 'block';

        } catch (error) {
            console.error('Erro ao processar PDF:', error);
            showPopup('Erro ao ler o arquivo PDF.');
            resetForm();
        }
    }

    function handleGenerateOS() {
        const technician = localStorage.getItem('atendenteAtual')?.toUpperCase();
        if (!technician) return showPopup('Selecione um atendente antes de gerar a OS.');

        const { formatted: phone, isValid } = formatPhone(elements.phone.value);
        if (!isValid) {
            elements.phoneError.textContent = 'Telefone inválido. Ex: (21) 98765-4321';
            return;
        }
        elements.phoneError.textContent = '';
        
        const isSelfWithdrawal = elements.selfWithdrawal.checked;
        const withdrawalDay = formatDate(elements.withdrawalDate.value);
        const installationDay = formatDate(elements.installationDate.value);
        
        if (!isSelfWithdrawal && !withdrawalDay) return showPopup('Data de Retirada é obrigatória.');
        if (!installationDay) return showPopup('Data de Instalação é obrigatória.');
        if (!isSelfWithdrawal && elements.installationDate.value && elements.withdrawalDate.value && new Date(elements.installationDate.value) < new Date(elements.withdrawalDate.value)) {
            return showPopup('Instalação não pode ser antes da Retirada.');
        }

        const withdrawalPeriod = elements.withdrawalPeriod.value.toUpperCase();
        const installationPeriod = elements.installationPeriod.value.toUpperCase();
        
        const signature = elements.signature.value === 'digital' ? 'ASSINATURA DIGITAL PENDENTE' : 'TITULAR NO LOCAL PARA ASSINATURA';
        
        let scheduleLines = '';
        if (!isSelfWithdrawal) {
            osTextData.withdrawal = `${withdrawalDay} - ${pdfData.contrato} - ${pdfData.primeiroNome} - ${pdfData.oldAddress} - MUD ENDEREÇO - ${withdrawalPeriod} - ${technician}`;
            scheduleLines += osTextData.withdrawal + '\n';
        } else {
            osTextData.withdrawal = '';
        }
        
        osTextData.installation = `${installationDay} - ${pdfData.contrato} - ${pdfData.primeiroNome} - ${pdfData.newAddress} - MUD ENDEREÇO - ${installationPeriod} - ${technician}`;
        scheduleLines += osTextData.installation;
        
        // ✅ LINHA CORRIGIDA / READICIONADA ABAIXO
        const withdrawalText = isSelfWithdrawal ? 'CLIENTE FAZ A RETIRADA POR CONTA PRÓPRIA' : `RETIRAR EM ${pdfData.oldAddress} DIA ${withdrawalDay} ${withdrawalPeriod}`;
        
        const taxValue = elements.taxValue.value;
        let taxText;
        if (elements.renewal.checked) {
            taxText = 'ISENTO DA TAXA POR RENOVAÇÃO.';
        } else if (elements.migration.checked) {
            taxText = 'ISENTO DA TAXA POR MIGRAÇÃO.';
        } else if (taxValue === 'isento') {
            taxText = 'ISENTO DA TAXA.';
        } else {
            taxText = `TAXA DE R$${taxValue}.`;
        }

        // --- INÍCIO DA NOVA LÓGICA DO PORTADOR ---
        let carrierText = '';
        if (elements.migration.checked) {
            const selectedCarrier = elements.oldCarrier.value;
            if (selectedCarrier !== 'none') {
                carrierText = `** ANTIGO PORTADOR ${selectedCarrier.toUpperCase()} **\n`;
            }
        }
        // --- FIM DA NOVA LÓGICA ---

        // Adiciona a variável 'carrierText' no início da O.S.
        osTextData.os = `${carrierText}${phone} ${pdfData.primeiroNome} | ** ${elements.equipmentType.value.toUpperCase()} **\n${withdrawalText}.\nINSTALAR EM ${pdfData.newAddress} DIA ${installationDay} ${installationPeriod}.\n${taxText}\n${signature}.`;
        
        const fullOutput = `${scheduleLines}\n\n${osTextData.os}`;
        elements.output.textContent = replacePlaceholders(fullOutput);
        elements.output.style.height = 'auto';
        elements.output.style.height = (elements.output.scrollHeight) + 'px';
        elements.copyButtons.style.display = 'flex';
    }

    // --- Configuração Inicial e Event Listeners ---
    setMinDates();

    elements.loadPdfBtn.addEventListener('click', handlePdfLoad);
    elements.generateOsBtn.addEventListener('click', handleGenerateOS);
    elements.backToUploadBtn.addEventListener('click', resetForm);
    elements.copyWithdrawalBtn.addEventListener('click', () => {
        if(osTextData.withdrawal) navigator.clipboard.writeText(osTextData.withdrawal).then(() => showPopup('Agendamento de Retirada copiado!'));
        else showPopup('Não há agendamento de retirada para copiar.');
    });
    elements.copyInstallationBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(osTextData.installation).then(() => showPopup('Agendamento de Instalação copiado!'));
    });
    elements.copyOsBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(replacePlaceholders(osTextData.os)).then(() => showPopup('Texto da O.S. copiado!'));
    });
    elements.pdfUpload.addEventListener('change', () => {
        elements.fileName.textContent = elements.pdfUpload.files[0]?.name || 'Nenhum arquivo selecionado';
    });
    elements.phone.addEventListener('blur', () => {
        const { formatted, isValid } = formatPhone(elements.phone.value);
        elements.phone.value = formatted;
        elements.phoneError.textContent = isValid ? '' : 'Telefone inválido.';
    });
    elements.selfWithdrawal.addEventListener('change', () => {
        elements.withdrawalSection.style.display = elements.selfWithdrawal.checked ? 'none' : 'block';
        updateInstallationMinDate();
    });
    elements.withdrawalDate.addEventListener('change', updateInstallationMinDate);
    elements.renewal.addEventListener('change', updateTaxLogic);
    elements.migration.addEventListener('change', updateTaxLogic);
    elements.renewal.addEventListener('change', handleCheckboxExclusion);
    elements.migration.addEventListener('change', handleCheckboxExclusion);
}

// --- assets\js\firebase.js ---

import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
import { getDatabase, ref, set, get, remove } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-database.js";
import { 
    getAuth, 
    createUserWithEmailAndPassword, 
    signInWithEmailAndPassword, 
    signOut, 
    onAuthStateChanged,
    updateProfile,
    updatePassword 
} from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";

const firebaseConfig = {
    apiKey: "AIzaSyB5wO0x-7NFmh6waMKzWzRew4ezfYOmYBI",
    authDomain: "site-ati-75d83.firebaseapp.com",
    databaseURL: "https://site-ati-75d83-default-rtdb.firebaseio.com/",
    projectId: "site-ati-75d83",
    storageBucket: "site-ati-75d83.appspot.com",
    messagingSenderId: "467986581951",
    appId: "1:467986581951:web:046a778a0c9b6967d5790a",
    measurementId: "G-22D5RNGGK6"
};

export let db;
let auth;

export function initializeFirebase() {
    try {
        const app = initializeApp(firebaseConfig);
        db = getDatabase(app);
        auth = getAuth(app);
    } catch (error) {
        console.error("❌ Erro ao inicializar Firebase:", error);
    }
}

function capitalizeFullName(name) {
    if (!name || typeof name !== 'string') return '';
    return name.split(' ').map(word => 
        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
    ).join(' ');
}

export const loginUser = (email, password) => signInWithEmailAndPassword(auth, email, password);
export const logoutUser = () => signOut(auth);
export const checkAuthState = (callback) => onAuthStateChanged(auth, callback);
export const updateUserPassword = (newPassword) => {
    if (!auth.currentUser) throw new Error("Usuário não autenticado.");
    return updatePassword(auth.currentUser, newPassword);
};

export async function loginWithUsername(username, password) {
    const sanitizedUsername = username.trim().toLowerCase();
    const userRef = ref(db, `atendentes/${sanitizedUsername}`);
    const snapshot = await get(userRef);

    if (!snapshot.exists() || !snapshot.val().email) {
        const error = new Error("Credenciais inválidas.");
        error.code = 'auth/invalid-login-credentials';
        throw error;
    }

    const email = snapshot.val().email;
    return signInWithEmailAndPassword(auth, email, password);
}

export async function createUserAccount(details) {
    const { email, password, username, fullName } = details;
    const sanitizedUsername = username.trim().toLowerCase().replace(/\s+/g, "_");
    if (/[.$#[\]/]/.test(sanitizedUsername)) {
        throw new Error('Nome de usuário inválido.');
    }

    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    const formattedFullName = capitalizeFullName(fullName);

    await updateProfile(user, { displayName: formattedFullName });

    const newAtendenteData = {
        nomeCompleto: formattedFullName,
        role: "usuario",
        status: "ativo",
        uid: user.uid,
        email: email
    };

    try {
        const atendenteRef = ref(db, `atendentes/${sanitizedUsername}`);
        await set(atendenteRef, newAtendenteData);
        // Retorna tudo que o app.js precisa para iniciar o app imediatamente
        return { userCredential, sanitizedUsername, newAtendenteData };
    } catch (error) {
        await user.delete();
        console.error("Erro ao gravar no banco de dados, usuário de autenticação foi revertido:", error);
        throw new Error('Este nome de usuário já pode estar em uso ou ocorreu um erro de permissão.');
    }
}

export async function loadAtendentes() {
    const dbRef = ref(db, 'atendentes');
    const snapshot = await get(dbRef);
    return snapshot.exists() ? snapshot.val() : {};
}

export async function loadDataForAttendant(attendant) {
    if (!attendant || !auth.currentUser) return [];
    const dbRef = ref(db, `respostas/${attendant}`);
    const snapshot = await get(dbRef);
    // Lógica simplificada: Apenas lê. Se não existir, retorna vazio.
    return snapshot.exists() ? snapshot.val() : [];
}

export async function saveDataForAttendant(attendant, data) {
    if (!attendant || !auth.currentUser) {
        console.error("Tentativa de salvar dados sem um atendente definido.");
        return;
    }
    const dbRef = ref(db, `respostas/${attendant}`);
    await set(dbRef, data);
}

export async function updateUserFullName(username, newFullName) {
    if (!auth.currentUser) throw new Error("Usuário não autenticado.");
    const formattedName = capitalizeFullName(newFullName);
    const dbRef = ref(db, `atendentes/${username}/nomeCompleto`);
    await set(dbRef, formattedName);
    await updateProfile(auth.currentUser, { displayName: formattedName });
}

async function updateUserData(username, field, value) {
    if (!auth.currentUser) throw new Error("Ação não permitida.");
    const userFieldRef = ref(db, `atendentes/${username}/${field}`);
    return set(userFieldRef, value);
}
export async function loadOsTemplatesForAttendant(attendant) {
    if (!attendant || !auth.currentUser) return [];
    // O novo caminho no banco de dados, separado das respostas
    const dbRef = ref(db, `modelos_os/${attendant}`);
    const snapshot = await get(dbRef);
    return snapshot.exists() ? snapshot.val() : [];
}

export async function saveOsTemplatesForAttendant(attendant, data) {
    if (!attendant || !auth.currentUser) {
        console.error("Tentativa de salvar modelos de O.S. sem um atendente definido.");
        return;
    }
    // O novo caminho no banco de dados
    const dbRef = ref(db, `modelos_os/${attendant}`);
    await set(dbRef, data);
}

export const updateUserRole = (username, newRole) => updateUserData(username, 'role', newRole);
export const updateUserStatus = (username, newStatus) => updateUserData(username, 'status', newStatus);


// --- assets\js\os-editor.js ---

// assets/js/os-editor.js - VERSÃO CORRIGIDA E FINAL

import { showPopup } from './ui.js';
import { saveOsTemplatesForAttendant, db } from './firebase.js'; 
import { ref, get } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-database.js";

let elements = {};
let allUserTemplates = []; 
let currentUsername = '';

function renderList() {
    // Como agora só temos modelos de O.S., não precisamos mais filtrar.
    const osTemplates = allUserTemplates;
    elements.list.innerHTML = '';
    if (osTemplates.length === 0) {
        elements.list.innerHTML = '<p>Nenhum modelo de O.S. encontrado.</p>';
        return;
    }

    const groupedByCategory = osTemplates.reduce((acc, template) => {
        const category = template.category || 'Geral';
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(template);
        return acc;
    }, {});

    for (const category in groupedByCategory) {
        const categoryHeader = document.createElement('div');
        categoryHeader.className = 'os-category-header';
        categoryHeader.textContent = category;
        elements.list.appendChild(categoryHeader);

        groupedByCategory[category].forEach(template => {
            const originalIndex = allUserTemplates.indexOf(template);
            const item = document.createElement('div');
            item.className = 'os-list-item';
            item.textContent = template.title;
            item.dataset.index = originalIndex;
            
            item.addEventListener('click', () => {
                document.querySelectorAll('.os-list-item.active').forEach(i => i.classList.remove('active'));
                item.classList.add('active');
                fillFormForEdit(originalIndex);
            });

            elements.list.appendChild(item);
        });
    }
}

function fillFormForEdit(index) {
    const template = allUserTemplates[index];
    if (!template) return;

    elements.formTitle.textContent = `Editando: ${template.title}`;
    elements.editIndex.value = index;
    elements.title.value = template.title;
    elements.text.value = template.text;
    elements.category.value = template.category;
    elements.keywords.value = (template.keywords || []).join(', ');
    elements.deleteBtn.style.display = 'inline-block';
}

function resetForm() {
    // --- CORREÇÃO FINAL: Reset manual e explícito dos campos ---
    elements.title.value = '';
    elements.text.value = '';
    elements.keywords.value = '';
    elements.category.selectedIndex = 0;

    elements.formTitle.textContent = 'Crie um Novo Modelo';
    elements.editIndex.value = '';
    elements.deleteBtn.style.display = 'none';
    document.querySelectorAll('.os-list-item.active').forEach(i => i.classList.remove('active'));
}

async function saveAllTemplates() {
    if (!currentUsername) return;
    // Chama a função dedicada para salvar os modelos de O.S.
    await saveOsTemplatesForAttendant(currentUsername, allUserTemplates);
    renderList();
}

async function handleFormSubmit(e) {
    e.preventDefault();
    const data = {
        title: elements.title.value.trim(),
        text: elements.text.value.trim(),
        category: elements.category.value,
        keywords: elements.keywords.value.split(',').map(k => k.trim()).filter(Boolean),
    };

    if (!data.title) {
        showPopup('O título é obrigatório.', 'error');
        return;
    }

    const editIndex = elements.editIndex.value;

    try {
        if (editIndex !== '') { // Editando
            const template = allUserTemplates[parseInt(editIndex)];
            Object.assign(template, data);
        } else { // Criando um novo (com a correção de imutabilidade)
            allUserTemplates = [...allUserTemplates, data];
        }

        await saveAllTemplates();
        showPopup('Modelo salvo com sucesso!', 'success');

    } catch (error) {
        showPopup('Erro ao salvar o modelo.', 'error');
        console.error("Falha em handleFormSubmit:", error);

    } finally {
        // O finally garante que o formulário sempre será limpo.
        resetForm();
    }
}

async function handleDelete() {
    const editIndex = elements.editIndex.value;
    if (editIndex === '') return;

    if (confirm('Tem certeza que deseja apagar este modelo?')) {
        allUserTemplates.splice(parseInt(editIndex), 1);
        await saveAllTemplates();
        showPopup('Modelo apagado.', 'info');
        resetForm();
    }
}

async function resetToDefaults() {
    if (!confirm('Isso substituirá TODOS os seus modelos de O.S. pelos modelos padrão. Deseja continuar?')) {
        return;
    }

    try {
        const masterRef = ref(db, 'os_templates_master');
        const snapshot = await get(masterRef);
        if (snapshot.exists()) {
            allUserTemplates = snapshot.val(); 
            await saveAllTemplates();
            showPopup('Modelos de O.S. resetados para o padrão!', 'success');
        } else {
            showPopup('Nenhum modelo padrão encontrado no banco de dados.', 'error');
        }
    } catch (error) {
        showPopup('Erro ao buscar modelos padrão.', 'error');
        console.error("Erro ao resetar:", error);
    }
}

export function initializeOsEditor() {
    // A CORREÇÃO PRINCIPAL: Preenchemos 'elements' aqui, depois que a página carregou.
    elements = {
        list: document.getElementById('os-list'),
        form: document.getElementById('os-form'),
        formTitle: document.getElementById('os-form-title'),
        editIndex: document.getElementById('os-edit-index'),
        title: document.getElementById('os-title'),
        text: document.getElementById('os-text'),
        category: document.getElementById('os-category'),
        keywords: document.getElementById('os-keywords'),
        saveBtn: document.getElementById('os-save-btn'),
        newBtn: document.getElementById('os-new-btn'),
        deleteBtn: document.getElementById('os-delete-btn'),
        resetBtn: document.getElementById('os-reset-btn'),
    };

    // E então adicionamos os eventos
    elements.form.addEventListener('submit', handleFormSubmit);
    elements.newBtn.addEventListener('click', resetForm);
    elements.deleteBtn.addEventListener('click', handleDelete);
    elements.resetBtn.addEventListener('click', resetToDefaults);
}

export const osEditorModule = {
    setTemplates: (templates, username) => {
        allUserTemplates = templates || []; // Garante que seja um array
        currentUsername = username;
        renderList();
        resetForm();
    }
};

// --- assets\js\theme.js ---

import { showPopup } from './ui.js';

// Funções auxiliares de cor
function lightenColor(hex, percent) {
    hex = hex.replace("#", "");
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    const increase = percent / 100;
    return `#${Math.min(255, Math.round(r + (255 - r) * increase)).toString(16).padStart(2, "0")}${Math.min(255, Math.round(g + (255 - g) * increase)).toString(16).padStart(2, "0")}${Math.min(255, Math.round(b + (255 - b) * increase)).toString(16).padStart(2, "0")}`;
}
function hexToRgba(hex, alpha) {
    hex = hex.replace("#", "");
    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}
function getLuminance(hex) {
    if (!hex || hex.length < 4) return 0; // Proteção contra cores inválidas
    hex = hex.replace("#", "");
    const r = parseInt(hex.substring(0, 2), 16) / 255;
    const g = parseInt(hex.substring(2, 4), 16) / 255;
    const b = parseInt(hex.substring(4, 6), 16) / 255;
    const a = [r, g, b].map(v => v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4));
    return 0.2126 * a[0] + 0.7152 * a[1] + 0.0722 * a[2];
}

// --- Função Principal de Inicialização do Tema ---
export function initializeTheme() {
    const elements = {
        popup: document.getElementById('customizationPopup'),
        openBtn: document.getElementById('darkModeToggleBtn'),
        saveBtn: document.getElementById('saveCustomizationBtn'),
        closeBtn: document.getElementById('closeCustomizationBtn'),
        themeToggle: document.getElementById('themeToggle'),
        neonBorders: document.getElementById('neonBorders'),
        iconColor: document.getElementById('iconColor'),
        borderColor: document.getElementById('borderColor'),
        textColor: document.getElementById('textColor'),
        styleTag: document.getElementById('custom-styles') || document.createElement('style')
    };
    if (!document.getElementById('custom-styles')) {
        elements.styleTag.id = 'custom-styles';
        document.head.appendChild(elements.styleTag);
    }

    let originalSettings = {};

    const applyCustomizations = (settings) => {
        document.body.classList.toggle('dark-mode', settings.isDarkMode);
        document.body.classList.toggle('no-neon', !settings.neonBorders);

        const contrastColorForIcons = getLuminance(settings.iconColor) > 0.5 ? '#000000' : '#FFFFFF';
        const contrastColorForButtons = getLuminance(settings.borderColor) > 0.5 ?
            '#111111' : '#FFFFFF';
        
        elements.styleTag.textContent = `
            :root {
                --icon-color: ${settings.iconColor};
                --border-color: ${settings.borderColor};
                --button-bg: ${settings.borderColor};
                --heading-color: ${settings.textColor};
                --button-text: ${contrastColorForButtons};
                --button-hover-bg: ${lightenColor(settings.borderColor, 20)};
                --shadow-color: ${hexToRgba(settings.borderColor, 0.5)};
            }
            .sidebar-button.active {
                background-color: ${settings.iconColor} !important;
                color: ${contrastColorForIcons} !important;
            }
        `;

        // --- ADIÇÃO IMPORTANTE ---
        // Envia as configurações de tema para a extensão através da ponte.
        window.postMessage({
            type: "ATI_THEME_UPDATE",
            themeSettings: settings
        }, "*");
    };

    const loadSettings = () => {
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        const defaultColors = {
            iconColor: isDarkMode ? '#0AEEF5' : '#D12E66',
            borderColor: isDarkMode ? '#0AEEF5' : '#D12E66',
            textColor: isDarkMode ? '#E5E5E5' : '#1A3C5A',
        };
        return {
            isDarkMode: isDarkMode,
            neonBorders: localStorage.getItem('neonBorders') !== 'false',
            iconColor: localStorage.getItem('iconColor') || defaultColors.iconColor,
            borderColor: localStorage.getItem('borderColor') || defaultColors.borderColor,
            textColor: localStorage.getItem('textColor') || defaultColors.textColor,
        };
    };

    const saveSettings = (settings) => {
        localStorage.setItem('darkMode', settings.isDarkMode);
        localStorage.setItem('neonBorders', settings.neonBorders);
        localStorage.setItem('iconColor', settings.iconColor);
        localStorage.setItem('borderColor', settings.borderColor);
        localStorage.setItem('textColor', settings.textColor);
    };

    const updatePopupUI = (settings) => {
        elements.themeToggle.checked = settings.isDarkMode;
        elements.neonBorders.checked = settings.neonBorders;
        elements.iconColor.value = settings.iconColor;
        elements.borderColor.value = settings.borderColor;
        elements.textColor.value = settings.textColor;
    };

    elements.openBtn.addEventListener('click', () => {
        originalSettings = loadSettings();
        updatePopupUI(originalSettings);
        elements.popup.style.display = 'block';
    });

    elements.closeBtn.addEventListener('click', () => {
        elements.popup.style.display = 'none';
        applyCustomizations(originalSettings);
    });

    elements.saveBtn.addEventListener('click', () => {
        const newSettings = {
            isDarkMode: elements.themeToggle.checked,
            neonBorders: elements.neonBorders.checked,
            iconColor: elements.iconColor.value,
            borderColor: elements.borderColor.value,
            textColor: elements.textColor.value,
        };
        saveSettings(newSettings);
        applyCustomizations(newSettings);
        elements.popup.style.display = 'none';
        showPopup('Personalização salva!');
    });
    
    ['input', 'change'].forEach(eventType => {
        elements.popup.addEventListener(eventType, () => {
            const previewSettings = {
                isDarkMode: elements.themeToggle.checked,
                neonBorders: elements.neonBorders.checked,
                iconColor: elements.iconColor.value,
                borderColor: elements.borderColor.value,
                textColor: elements.textColor.value,
            };
            applyCustomizations(previewSettings);
        });
    });

    const initialSettings = loadSettings();
    applyCustomizations(initialSettings);
}

// --- assets\js\ui.js ---

// --- Funções de UI reutilizáveis ---

export function showPopup(message, type = 'info', duration = 3000) {
    const popup = document.getElementById('popup');
    if (!popup) return;

    popup.classList.remove('success', 'error', 'info');
    popup.classList.add(type);
    popup.textContent = message;
    popup.classList.add('show');
    
    setTimeout(() => {
        popup.classList.remove('show');
    }, duration);
}
export function showSection(sectionId, username) {
    // Esconde todas as seções de conteúdo
    document.querySelectorAll('.content > div[id$="Section"]').forEach(section => {
        section.style.display = 'none';
    });

    // Mostra apenas a seção desejada
    const activeSection = document.getElementById(`${sectionId}Section`);
    if (activeSection) {
        activeSection.style.display = 'block';
    }

    // Gerencia a classe 'active' nos botões da sidebar
    document.querySelectorAll('.sidebar-button[data-section]').forEach(button => {
        // Remove a classe 'active' de todos os botões
        button.classList.remove('active');
        // Adiciona a classe 'active' apenas ao botão correspondente
        if (button.dataset.section === sectionId) {
            button.classList.add('active');
        }
    });

    updateGreeting(username);
}

export function initializeUI() {
    const sidebar = document.getElementById('sidebar');
    const toggleSidebarBtn = document.getElementById('toggleSidebarBtn');
    if (sidebar && toggleSidebarBtn) {
        toggleSidebarBtn.addEventListener('click', () => {
            sidebar.classList.toggle('expanded');
        });
    }
}

export function updateGreeting(username) {
    const hora = new Date().getHours();
    let saudacaoText = hora >= 5 && hora < 12 ? "Bom dia" :
                         hora >= 12 && hora < 18 ? "Boa tarde" : "Boa noite";
    if (username) {
        const capitalizedUsername = username.charAt(0).toUpperCase() + username.slice(1);
        saudacaoText += `, ${capitalizedUsername}`;
    }                         
    document.getElementById('saudacaoChat').textContent = saudacaoText;
}

export function replacePlaceholders(text) {
    const hora = new Date().getHours();
    const saudacao = hora >= 5 && hora < 12 ? "Bom dia" :
                     hora >= 12 && hora < 18 ? "Boa tarde" : "Boa noite";
    const despedida = hora >= 5 && hora < 12 ? "Tenha uma excelente manhã" :
                      hora >= 12 && hora < 18 ? "Tenha uma excelente tarde" : "Tenha uma excelente noite";
    
    // Verifica se o texto é uma string antes de substituir
    if (typeof text !== 'string') return '';

    return text.replace(/\[SAUDACAO\]/gi, saudacao).replace(/\[DESPEDIDA\]/gi, despedida);
}

export function adjustTextareaHeight(textarea) {
    if (textarea) {
        textarea.style.height = 'auto';
        textarea.style.height = `${textarea.scrollHeight}px`;
    }
}

// --- config_yml ---

# _config.yml - Configuração Jekyll para ATI

# Site settings
title: "ATI - Auxiliar de Atendimentos"
description: "Sistema automatizado para atendimentos com chat humanizado e conversor de aditivos contratuais"
author: "Equipe ATI"
email: "contato@ati.com"
baseurl: "" # Subpasta do site, ex: /meu-projeto
url: "https://vituali.github.io" # URL base do site

# Build settings
markdown: kramdown
highlighter: rouge
theme: minima
encoding: utf-8

# Plugins
plugins:
  - jekyll-feed
  - jekyll-sitemap
  - jekyll-seo-tag

# SEO settings
logo: "/assets/images/favicon.ico"
social:
  name: "ATI"
  links:
    - "https://github.com/vituali/ATI"

# Collections (se precisar no futuro)
collections:
  docs:
    output: true
    permalink: /:collection/:name/

# Defaults
defaults:
  - scope:
      path: ""
      type: "pages"
    values:
      layout: "default"
  - scope:
      path: ""
      type: "docs"
    values:
      layout: "doc"

# Exclusões do build
exclude:
  - README.md
  - Gemfile
  - Gemfile.lock
  - node_modules/
  - package.json
  - package-lock.json
  - yarn.lock
  - .git/
  - .gitignore
  - .sass-cache/
  - .jekyll-cache/
  - .jekyll-metadata
  - vendor/
  - docs/desenvolvimento/
  - "*.tmp"
  - "*.bak"

# Inclusões específicas
include:
  - _pages
  - assets/

# Sass/SCSS settings
sass:
  sass_dir: assets/css
  style: compressed # Para produção use 'compressed'

# Markdown settings
kramdown:
  input: GFM
  syntax_highlighter: rouge
  syntax_highlighter_opts:
    css_class: 'highlight'
    span:
      line_numbers: false
    block:
      line_numbers: false

# Timezone
timezone: America/Sao_Paulo

# Configurações de desenvolvimento
livereload: true
incremental: true

# Future posts
future: false

# Pagination (se necessário)
paginate: 10
paginate_path: "/page:num/"

# Configurações do Feed
feed:
  posts_limit: 20
  excerpt_separator: "\n\n"

# Configurações de SEO
twitter:
  username: "seutwitter"
  card: "summary"

facebook:
  app_id: "seuappid"
  publisher: "suapagina"

# Google Analytics (opcional)
google_analytics: "UA-XXXXXXX-X"

# Configurações personalizadas do ATI
ati:
  version: "2.0.0"
  firebase:
    project_id: "site-ati-75d83"
  features:
    - "Chat Automatizado"
    - "Conversor de Aditivos"
    - "Temas Personalizáveis"
    - "Layout Responsivo"
  supported_browsers:
    - "Chrome 90+"
    - "Firefox 88+"
    - "Safari 14+"
    - "Edge 90+"

// --- docs\Brainstorm.txt ---

1. criar um sistema para automatizar o processo do sgp (em andamento. metade feito)
2. arrumar a parte da extensão que ao entrar e fazer o aditivo se clickar fora da pagina ele recarrega a pagina e perde os dados.
3. criar um sistema para justificativa de ponto e etc automatico baseado no nome.
4. criar melhorar o readme.md
5. criar um sistema de sugestão de texto baseado na leitura do chat.
6. melhorar o sistema de criador de o.s permitindo escolher datas e extrair melhor os dados do cliente. (requer vinculo com o sgp).


//futuro//
1. transformar o html em react para melhor dinamica.
2. transformar o banco de dados no firebase para dockerfile.
3. revisar o codigo para comentar melhor para melhor localização.

// --- docs\manual.md ---

📖 Manual do Usuário - ATI
Bem-vindo ao ATI! 👋
Este manual vai te ajudar a usar todas as funcionalidades do sistema de forma eficiente.

🚀 Primeiros Passos: Registro e Login
O ATI agora funciona com contas individuais. Cada atendente precisa ter a sua.

1. Criando uma Conta (Registro)
Na tela inicial, clique no link "Registre-se".

Preencha todos os campos:

Nome de Usuário (Login): Um nome curto, em minúsculas e sem espaços (ex: victor). Este será seu login principal.

Nome e Sobrenome: Seu nome completo, que será exibido em outros locais (ex: Victor Henrique).

Email e Senha: Suas credenciais para acesso e recuperação.

Clique em "Registrar". O sistema irá criar sua conta e fazer o login automaticamente.

Ao se registrar, sua conta já virá com um conjunto de respostas-padrão para você começar a usar e editar!

2. Acessando sua Conta (Login)
Na tela inicial, preencha os campos:

Usuário ou E-mail: Você pode usar tanto o seu nome de usuário (victor) quanto o seu e-mail para entrar.

Senha: Sua senha de acesso.

Clique em "Entrar".

👤 Gerenciando seu Perfil
Você pode alterar seus dados pessoais a qualquer momento.

Clique no botão com o ícone de perfil 👤 e seu nome de usuário na barra lateral.

Um menu irá aparecer. Nele, você pode:

Alterar Nome Completo: Digite seu novo nome e clique em "Salvar Nome".

Alterar Senha: Digite e confirme sua nova senha e clique em "Salvar Nova Senha".

Sair (Logout): Desconecta sua conta do sistema.

💬 Usando o Chat Automatizado
Após o login, suas respostas personalizadas são carregadas.

Enviando Mensagens Rápidas
Escolha a Mensagem na lista organizada por categoria.

Personalize se Necessário: Edite o texto na caixa de mensagem.

Use os Marcadores: [SAUDACAO] e [DESPEDIDA] para saudações que se ajustam ao horário.

Copie e Cole: Clique em 📋 Copiar e cole no seu sistema de atendimento.

Gerenciando Mensagens
➕ Adicionar: Cria uma nova resposta com um texto padrão para você editar.

✏️ Editar: Selecione uma mensagem, modifique o texto e clique em 💾 Salvar.

🗑️ Apagar: Exclui permanentemente a mensagem selecionada (após confirmação).

⇅ Arrastar e Soltar: Clique e segure no título de uma categoria ou de uma resposta para reordená-las.

👑 Painel de Administração (Para Admins)
Se sua conta tiver permissão de administrador, você terá acesso a uma área de gerenciamento.

Acessando o Painel
Abra o seu menu de perfil (clicando no botão 👤).

Clique no botão "Painel do Administrador".

Gerenciando Usuários
No painel, você verá uma lista de todos os usuários e poderá:

Alterar Permissão: Mudar um usuário de "Usuário" para "Admin" (e vice-versa).

Alterar Status: Desativar uma conta para bloquear o acesso do usuário sem apagar seus dados, ou Ativar uma conta previamente desativada.

Verificação de Usuários Órfãos
Esta ferramenta ajuda a manter o sistema limpo, encontrando contas que existem na Autenticação do Firebase mas não no banco de dados.

No painel, clique em "Passo 1: Carregar Usuários Válidos".

Abra o painel do Firebase Authentication, selecione (Ctrl+A) e copie (Ctrl+C) a lista de usuários.

Cole (Ctrl+V) na área de texto da ferramenta.

Clique em "Passo 3: Encontrar Contas Órfãs". O sistema mostrará uma lista de e-mails que podem ser removidos com segurança diretamente no Firebase.

📄 Usando o Conversor de Aditivos
O processo continua o mesmo:

Upload: Vá para a seção 📄 Conversor, escolha o arquivo PDF e clique em "Carregar e Extrair Dados".

Verificação e Configuração: Confira os dados extraídos e preencha o restante do formulário.

Geração: Clique em "Gerar O.S" e use os botões de cópia.

🎨 Personalizando a Interface
Clique no botão ⚙️ Personalizar na barra lateral.

Ajuste o Modo Escuro, Bordas Neon e as Cores.

Clique em 💾 Salvar para manter suas preferências.

🎯 Sucesso nos seus atendimentos com o ATI! 🚀

// --- docs\project.txt ---

projeto/
├── index.html
├── _config.yml
├── .gitignore
├── README.md
├── assets/
│   ├── css/
│   │   ├── main.css          # @imports e configurações base
│   │   ├── layout.css        # Sidebar, content, grid
│   │   ├── components.css    # Buttons, forms, cards, popups
│   │   └── themes.css        # Light/dark/neon themes
│   ├── js/
│   │   ├── app.js
│   │   ├── chat.js
│   │   ├── conversor.js
│   │   ├── firebase.js
│   │   ├── theme.js
│   │   └── ui.js
│   └── images/
│       └── favicon.ico
└── docs/
    └── manual.md

// --- gitignore ---

# ==========================================
# .gitignore para ATI - Auxiliar de Atendimentos
# ==========================================

# ==========================================
# Jekyll
# ==========================================
_site/
.sass-cache/
.jekyll-cache/
.jekyll-metadata
.bundle/
vendor/

# ==========================================
# Node.js
# ==========================================
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock
.npm/
.yarn/

# ==========================================
# Dependências Ruby
# ==========================================
Gemfile.lock

# ==========================================
# IDEs e Editores
# ==========================================
.vscode/
.idea/
*.swp
*.swo
*~
.sublime-project
.sublime-workspace

# ==========================================
# Sistemas Operacionais
# ==========================================
# macOS
.DS_Store
._*
.Spotlight-V100
.Trashes

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msm
*.msp
*.lnk

# Linux
*~
.directory
.Trash-*

# ==========================================
# Logs
# ==========================================
*.log
logs/
*.log.*
lerna-debug.log*

# ==========================================
# Arquivos Temporários
# ==========================================
*.tmp
*.temp
*.bak
*.backup
*.old
*.orig
*.rej

# ==========================================
# Configurações Locais
# ==========================================
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
config.local.js
firebase-config.local.js

# ==========================================
# Build e Distribuição
# ==========================================
dist/
build/
out/
.next/
.nuxt/
.cache/

# ==========================================
# Testes
# ==========================================
coverage/
*.cover
.nyc_output/
.coverage
.pytest_cache/
htmlcov/

# ==========================================
# Arquivos de desenvolvimento
# ==========================================
TODO.md
NOTES.md
development/
dev/
test-files/
debug/

# ==========================================
# Arquivos específicos do ATI
# ==========================================
# Backups de configuração Firebase
firebase-config-backup.js
credenciais-*.json

# Arquivos de teste de PDF
test-pdfs/
sample-pdfs/

# Dados de desenvolvimento
dev-data/
mock-data/

# Screenshots e assets temporários
screenshots/
temp-assets/

# ==========================================
# Compressão
# ==========================================
*.zip
*.tar.gz
*.rar
*.7z

# ==========================================
# Certificados e Chaves
# ==========================================
*.pem
*.key
*.crt
*.p12
*.pfx

# ==========================================
# Documentação gerada
# ==========================================
docs/build/
documentation/generated/

# ==========================================
# Cache de ferramentas
# ==========================================
.parcel-cache/
.eslintcache
.stylelintcache

# ==========================================
# Arquivos de sistema
# ==========================================
.fuse_hidden*
.nfs*

# ==========================================
# Específico do projeto ATI
# ==========================================
# Não versionar arquivos de configuração local
assets/js/firebase-config.local.js

# Arquivos de dados sensíveis
user-data/
client-data/

# Arquivos de log específicos
atendimento-logs/
conversor-logs/

// --- index.html ---

<!DOCTYPE html>
<html lang="pt-BR">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ATI - Auxiliar de Atendimentos</title>

    <link rel="icon" type="image/x-icon" href="assets/images/favicon.ico">
    <link rel="stylesheet" href="assets/css/main.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
</head>

<body class="dark-mode">

    <div id="popup" class="popup"></div>
    
    <div id="auth-overlay" class="modal-overlay" style="display: none;">
        <div class="modal-content card" style="max-width: 450px;">
                    <form id="login-form">
                <h3>Login - ATI</h3>
                <div class="modal-form-group">
                    <label for="loginIdentifier">Usuário ou E-mail:</label>
                    <input type="text" id="loginIdentifier" required autocomplete="username">
                </div>
                <div class="modal-form-group">
                    <label for="loginPassword">Senha:</label>
                    <input type="password" id="loginPassword" required autocomplete="current-password">
                </div>
                <div class="modal-buttons">
                    <button type="submit" class="button">Entrar</button>
                </div>
                <p class="auth-toggle-link">Ainda não tem conta? <a href="#" id="show-register">Registre-se</a></p>
            </form>
                    <form id="register-form" style="display: none;">
                <h3>Registro - Novo Atendente</h3>
                <div class="modal-form-group">
                    <label for="registerUsername">Nome de Usuário (Login):</label>
                    <input type="text" id="registerUsername" required placeholder="tudo minúsculo, sem espaços">
                </div>
                <div class="modal-form-group">
                    <label for="registerFullName">Nome e Sobrenome:</label>
                    <input type="text" id="registerFullName" required placeholder="Será exibido no seletor">
                </div>
                <div class="modal-form-group">
                    <label for="registerEmail">Email:</label>
                    <input type="email" id="registerEmail" required autocomplete="email">
                </div>
                <div class="modal-form-group">
                    <label for="registerPassword">Senha (mínimo 6 caracteres):</label>
                    <input type="password" id="registerPassword" required autocomplete="new-password">
                </div>
                <div class="modal-buttons">
                    <button type="submit" class="button">Registrar</button>
                </div>
                <p class="auth-toggle-link">Já tem uma conta? <a href="#" id="show-login">Faça Login</a></p>
            </form>
        </div>
    </div>
                    <div class="chatbox" style="display: none;">
    <div id="sidebar" class="sidebar">
        <button id="toggleSidebarBtn" class="toggle-sidebar" aria-label="Abrir ou fechar menu lateral">☰</button>
        <button class="sidebar-button active" data-section="chat"><span class="icon">🗨️</span><span class="text">Chat</span></button>
        <button class="sidebar-button" data-section="os"><span class="icon">📝</span><span class="text">Modelos O.S.</span></button>
        <button class="sidebar-button" data-section="conversor"><span class="icon">📄</span><span class="text">Conversor</span></button>
        <button class="sidebar-button" data-section="senhas"><span class="icon">🔑</span><span class="text">Senhas</span></button>
        <a href="https://chromewebstore.google.com/detail/ati-auxiliar-de-atendimen/mlgmmjacfbnkolflbankfiackpcnmckl" class="sidebar-button" target="_blank" rel="noopener noreferrer">
            <span class="icon">🚀</span>
            <span class="text">Extensão</span>
        </a>
                    <div class="sidebar-footer">
                <button id="atendenteToggleBtn" class="bottom-toggle" data-tooltip="Abrir perfil do usuário">
                    <span class="icon">👤</span>
                    <span class="text">Perfil</span>
                </button>
                    <button id="darkModeToggleBtn" class="bottom-toggle" data-tooltip="Personalizar interface">
                    <span class="icon">⚙️</span><span class="text">Personalizar</span>
                </button>
            </div>
        </div>
                    <div class="content">

            <div id="chatSection">
                <h1 id="saudacaoChat"></h1>
                <h2>🤖 Automatizador de Chat Humanizado 🤖</h2>
                <div class="card">
                    <div class="card-loader" id="chatLoader" style="display: none;">
                        <div class="loader"></div>
                    </div>

                    <div class="grupo">
                        <div id="custom-select" class="custom-select">
                            <div class="select-selected" id="select-display">Selecione uma resposta</div>
                            <div class="select-items select-hide" id="select-items">
                                </div>
                        </div>
                    </div>                 
                    
                    <div id="titleContainer" class="title-container" style="display: none;">
                        <input type="text" id="titulo" placeholder="Título da resposta">
                        <button id="saveTitleBtn" class="button">Salvar Título</button>
                    </div>
                    
                    <div class="grupo">
                        <label for="resposta">Mensagem:</label>
                        <textarea id="resposta" rows="4"></textarea>
                    </div>
                    <div class="controls">
                        <button id="copyBtn" class="button copy-btn" data-tooltip="Copiar mensagem">📋 Copiar</button>
                        <button id="editTitleBtn" class="button" data-tooltip="Editar título">✏️ Editar Título</button>
                        <button id="saveEditBtn" class="button" data-tooltip="Salvar mensagem">💾 Salvar</button>
                        <button id="deleteBtn" class="button" data-tooltip="Apagar resposta">🗑️ Apagar</button>
                        <button id="addBtn" class="button" data-tooltip="Adicionar nova resposta">➕ Adicionar</button>
                    </div>
                    
                    <p id="saudacaoDespedidaText">Use [SAUDACAO] e [DESPEDIDA] para textos dinâmicos.</p>
                </div>
            </div>
            <div id="osSection" style="display: none;">
                    <h1>Editor de Modelos de O.S.</h1>
                    <h2>Crie e gerencie os templates para a criação de Ordens de Serviço.</h2>

    <div class="os-editor-layout">
        <div class="os-list-container card">
            <h3>Seus Modelos</h3>
            <div id="os-list" class="os-list">
                </div>

             <button id="os-reset-btn" class="button back" style="width: 100%; margin-top: 15px;">Resetar para Padrão</button>
        </div>

        <div class="os-form-container card">
            <form id="os-form">
                <input type="hidden" id="os-edit-index">
                <h3 id="os-form-title">Selecione ou crie um modelo</h3>

                <div class="grupo">
                    <label for="os-title">Título do Modelo:</label>
                    <input type="text" id="os-title" placeholder="Ex: Sem Conexão" required>
                </div>

                <div class="grupo">
                    <label for="os-text">Texto da O.S.:</label>
                    <textarea id="os-text" rows="5" placeholder="Ex: CLIENTE SEM ACESSO. REALIZADO OS PROCEDIMENTOS..."></textarea>
                </div>

                <div class="grupo">
                    <label for="os-category">Categoria:</label>
                    <select id="os-category">
                        <option value="Suporte">Suporte</option>
                        <option value="Financeiro">Financeiro</option>
                        <option value="Comercial">Comercial</option>
                        <option value="Geral">Geral</option>
                        </select>
                </div>

                <div class="grupo">
                    <label for="os-keywords">Palavras-chave (separadas por vírgula):</label>
                    <input type="text" id="os-keywords" placeholder="sem conexao, nao funciona, caiu">
                </div>

                <div class="controls">
                    <button type="submit" id="os-save-btn" class="button">Salvar</button>
                    <button type="button" id="os-new-btn" class="button">Limpar</button>
                    <button type="button" id="os-delete-btn" class="button back" style="display: none;">Apagar</button>
                </div>
            </form>
        </div>
    </div>
</div>
                    <div id="conversorSection" style="display: none;">
                <h1 id="saudacaoConversor"></h1>
                <h2>Conversor de Aditivo</h2>
                
                <div id="uploadSection" class="upload-card">
                    <div class="upload-content">
                        <h3>Carregar Aditivo PDF</h3>
                        <div class="file-upload-wrapper">
                            <label for="pdfUpload" class="file-label">Escolher Arquivo</label>
                            <input type="file" id="pdfUpload" class="file-input" accept="application/pdf">
                            <span id="fileName" class="file-name">Nenhum arquivo selecionado</span>
                        </div>
                        <button class="button" id="loadPdfBtn">Carregar e Extrair Dados</button>
                    </div>
                </div>
                
                <div id="dataSection" style="display: none;">
                    <button class="button back" id="backToUploadBtn">Voltar</button>
                    <h3>Agendamento para Contrato - <span id="contratoSpan"></span></h3>
                
                    <div class="dual-grid">
                        <div class="card">
                            <h4>Dados Gerais</h4>
                            <div class="grupo">
                                <p><strong>Contrato:</strong> <span id="contrato"></span></p>
                                <p><strong>Nome:</strong> <span id="nome"></span></p>
                                <p><strong>Endereço Antigo:</strong> <span id="oldAddress"></span></p>
                                <p><strong>Endereço Novo:</strong> <span id="newAddress"></span></p>
                                <div class="inline-group">
                                    <div>
                                        <label for="phone">Número de Telefone:</label>
                                        <input type="text" id="phone" placeholder="21 99999-9999" autocomplete="tel">
                                        <span id="phoneError" class="error"></span>
                                    </div>
                                    <div>
                                        <label for="equipmentType">Tipo de Comodato:</label>
                                        <select id="equipmentType">
                                            <option value="alcl">ALCL</option>
                                            <option value="proprio">PROPRIO</option>
                                            <option value="huawei">HUAWEI</option>
                                            <option value="tp link">TP LINK</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card">
                            <h4>Detalhes do Contrato</h4>
                            <div class="grupo checkbox-group">
                                <label class="checkbox-label">
                                    <input type="checkbox" id="renewal">
                                    <span class="checkbox-custom"></span> É Renovação? (Isento de taxa)
                                </label>
                                <label class="checkbox-label">
                                    <input type="checkbox" id="migration">
                                    <span class="checkbox-custom"></span> É Migração? (Isento de taxa)
                                </label>
                            <div id="carrierSection" class="grupo" style="display: none; margin-top: 15px;">
                                <label for="oldCarrier">Antigo Portador:</label>
                                <select id="oldCarrier">
                                <option value="none">Sem alteração ou digitais</option>
                                <option value="ITAU AGT">BANCO ITAÚ - AGANTANGELO</option>
                                <option value="GERENCIANET AGT">GERENCIANET - AGATANGELO</option>
                                <option value="ITAU ATI">BANCO ITAU - ATI</option>
                                <option value="GERENCIANET - BANDA LARGA">GERENCIANET - ATI INTERNET BANDA LARGA</option>
                                </select>
                            </div>
                                <p id="renewalMessage" style="display: none;">Taxa isenta devido à renovação.</p>
                                <p id="migrationMessage" style="display: none;">Taxa isenta devido à migração.</p>
                            </div>
                            <div class="inline-group">
                                <div>
                                    <label for="taxValue">Valor da Taxa:</label>
                                    <select id="taxValue">
                                        <option value="100">R$ 100</option>
                                        <option value="65">R$ 65</option>
                                        <option value="50">R$ 50</option>
                                        <option value="isento">Isento</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="signature">Tipo de Assinatura:</label>
                                    <select id="signature">
                                        <option value="digital">Assinatura Digital</option>
                                        <option value="local">Assinatura no Local</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="dual-grid">
                        <div class="card">
                            <h4>Retirada</h4>
                            <div class="grupo checkbox-group">
                                <label class="checkbox-label">
                                    <input type="checkbox" id="selfWithdrawal">
                                    <span class="checkbox-custom"></span> Cliente faz a retirada
                                </label>
                            </div>
                            <div id="withdrawalSection" class="grupo">
                                <label for="withdrawalDate">Data de Retirada:</label>
                                <input type="date" id="withdrawalDate">
                                <label for="withdrawalPeriod">Período de Retirada:</label>
                                <select id="withdrawalPeriod">
                                    <option value="Manhã">Manhã</option>
                                    <option value="Tarde">Tarde</option>
                                </select>
                            </div>
                        </div>
                        <div class="card">
                            <h4>Instalação</h4>
                            <div class="grupo">
                                <label for="installationDate">Data de Instalação:</label>
                                <input type="date" id="installationDate">
                                <label for="installationPeriod">Período de Instalação:</label>
                                <select id="installationPeriod">
                                    <option value="Manhã">Manhã</option>
                                    <option value="Tarde">Tarde</option>
                                </select>
                            </div>
                        </div>
                    </div>
                  
                    <div class="card">
                        <button class="button" id="generateOsBtn">Gerar O.S</button>
                        <textarea id="output" class="output" readonly></textarea>
                        <div id="copyButtons" class="copy-buttons" style="display: none;">
                            <button class="button copy-btn" id="copyWithdrawalBtn">Copiar Retirada</button>
                            <button class="button copy-btn" id="copyInstallationBtn">Copiar Instalação</button>
                            <button class="button copy-btn" id="copyOsBtn">Copiar O.S</button>
                        </div>
                    </div>
                </div>
            </div>
            
        <div id="senhasSection" style="display: none;">
            <h1>Senhas de Equipamentos</h1>
            <h2>Acesso rápido aos logins e senhas dos roteadores. Clique para copiar.</h2>
            <div class="password-grid">
                <div class="card">
                    <h4>ALCL OLT NOKIA</h4>
                    <p><strong>LOGIN:</strong> <span class="copiable">ATI-GPON</span></p>
                    <p><strong>SENHA:</strong> <span class="copiable">@adminATI26422001</span></p>
                </div>
                <div class="card">
                    <h4>ALCL OLT FIBER</h4>
                    <p><strong>LOGIN:</strong> <span class="copiable">AdminGPON</span></p>
                    <p><strong>SENHA:</strong> <span class="copiable">adminati2001</span></p>
                    <hr>
                    <h4>Padrão de fabrica</h4>
                    <p><strong>LOGIN:</strong> <span class="copiable">AdminGPON</span></p>
                    <p><strong>SENHA:</strong> <span class="copiable">ALC#FGU</span></p>
                </div>
                <div class="card">
                    <h4>NBEL</h4>
                    <p><strong>Endereço:</strong> <span class="copiable">IP/login.cgi</span></p>
                    <hr>
                    <p><strong>LOGIN:</strong> <span class="copiable">atiinternet</span></p>
                    <p><strong>SENHA:</strong> <span class="copiable">@dminati2001</span></p>
                    <hr>
                    <h4>Alternativa</h4>
                    <p><strong>LOGIN:</strong> <span class="copiable">telecomadmin</span></p>
                    <p><strong>SENHA:</strong> <span class="copiable">admintelecom</span></p>
                </div>
                <div class="card">
                    <h4>HUAWEI E TP LINK</h4>
                    <p><strong>IP HUAWEI:</strong> <span class="copiable">192.168.3.1</span></p><br>
                    <p><strong>IP TP LINK:</strong> <span class="copiable">192.168.0.1</span></p>
                    <hr>
                    <p><strong>SENHA:</strong> <span class="copiable">atiadmin258963</span></p>
                    <hr>
                    <h4>Alternativa</h4>
                    <p><strong>SENHA:</strong> <span class="copiable">ATIADMIN258963</span></p>
                </div>
                <div class="card">
                    <h4>Ura</h4>
                    <p>
                    <h4><a href="http://201.158.20.39:8022/login" style="color: var(--heading-color);" target="_blank" rel="noopener noreferrer">Acessar o Sistema</a></h4>
                    </p>
                    <hr>
                    <p><strong>Login:</strong> <span class="copiable">christian</span></p>
                    <p><strong>senha:</strong> <span class="copiable">@Ati26422001!10547580770</span></p>
                </div>
                <div class="card">
                    <h4>Sites importantes</h4>
                    <h4><a href="https://painel.autentique.com.br/documentos/todos" style="color: var(--heading-color);" target="_blank" rel="noopener noreferrer">Autentique</a></h4>
                    <h4><a href="http://201.158.20.46:3000/" style="color: var(--heading-color);" target="_blank" rel="noopener noreferrer">ACS</a></h4>
                    <h4><a href="https://atiinternet.cademi.com.br/area/vitrine" style="color: var(--heading-color);" target="_blank" rel="noopener noreferrer">Curso</a></h4>
                    <h4><a href="http://201.158.20.35:8000/" style="color: var(--heading-color);" target="_blank" rel="noopener noreferrer">SGP interno</a></h4>
                    <h4><a href="https://sgp.atiinternet.com.br/admin/" style="color: var(--heading-color);" target="_blank" rel="noopener noreferrer">SGP externo</a></h4>
                </div>
            </div>
        </div>
                    <div id="customizationPopup" class="customization-popup" style="display: none;">
        <h2>Personalizar Cores</h2>
        <div class="customization-grid">
            <div class="popup-column">
                <label class="popup-label">
                    <span>Modo Escuro</span>
                    <label class="switch"><input type="checkbox" id="themeToggle"><span class="slider"></span></label>
                </label>
                <label class="popup-label">
                    <span>Ativar Bordas Neon</span>
                    <label class="switch"><input type="checkbox" id="neonBorders"><span class="slider"></span></label>
                </label>
            </div>
            <div class="popup-column">
                <label class="popup-label">
                    <span>Cor dos Ícones</span>
                    <input type="color" id="iconColor">
                </label>
                <label class="popup-label">
                    <span>Cor das Bordas e Botões</span>
                    <input type="color" id="borderColor">
                </label>
                <label class="popup-label">
                    <span>Cor dos Títulos</span>
                    <input type="color" id="textColor">
                </label>
            </div>
        </div>
        <div class="customization-buttons">
            <button class="button" id="saveCustomizationBtn">Salvar</button>
            <button class="button back" id="closeCustomizationBtn">Cancelar</button>
        </div>
    </div>
                    <div id="profileModal" class="modal-overlay" style="display: none;">
        <div class="modal-content card">
            <h3>Perfil do Usuário</h3>
          
            <form id="update-fullname-form">
                <div class="modal-form-group">
                    <label for="newFullName">Alterar Nome Completo:</label>
                    <input type="text" id="newFullName" placeholder="Seu nome e sobrenome">
                </div>
                <button type="submit" class="button">Salvar Nome</button>
            </form>
            <hr style="margin: 20px 0;">
          
            <form id="update-password-form">
                <div class="modal-form-group">
                    <label for="newPassword">Alterar Senha:</label>
                    <input type="password" id="newPassword" placeholder="Nova senha (mín. 6 caracteres)" autocomplete="new-password">
                </div>
                <button type="submit" class="button">Salvar Nova Senha</button>
            </form>
            <hr style="margin: 20px 0;">
                    <div id="admin-link-container" style="display: none;">
                <a href="admin.html" class="button">Painel do Administrador</a>
            </div>
            <div class="modal-buttons" style="margin-top: 20px;">
                <button id="modalLogoutBtn" class="button back">Sair (Logout)</button>
                <button id="modalCloseProfileBtn" class="button back">Fechar</button>
            </div>
        </div>
    </div>
                    <div id="confirmationModal" class="modal-overlay" style="display: none;">
        <div class="modal-content card">
            <h3 id="modalTitle">Confirmar Ação</h3>
            <p id="modalMessage">Você tem certeza que deseja continuar?</p>
            <div class="modal-buttons">
                <button id="modalConfirmBtn" class="button">Confirmar</button>
                <button id="modalCancelBtn" class="button back">Cancelar</button>
            </div>
        </div>
    </div>
                    <div id="addResponseModal" class="modal-overlay" style="display: none;">
        <div class="modal-content card">
            <h3>Adicionar Nova Resposta</h3>
            <div class="modal-form-group">
                <label for="newResponseTitle">Título da Resposta:</label>
                <input type="text" id="newResponseTitle" placeholder="Ex: Problema de conexão">
            </div>
            <div class="modal-form-group">
                <label for="newResponseCategory">Categoria:</label>
                <input type="text" id="newResponseCategory" placeholder="Ex: suporte (ou deixe em branco para 'geral')">
            </div>
            <div class="modal-buttons">
                <button id="modalSaveNewBtn" class="button">Salvar</button>
                <button id="modalCancelNewBtn" class="button back">Cancelar</button>
            </div>
        </div>
    </div>
   
    <script type="module" src="assets/js/app.js"></script>

</body>

</html>

// --- README.md ---

# ATI - Auxiliar de Atendimentos 🤖

[![Deploy static content to Pages](https://github.com/Vituali/ATI/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/Vituali/ATI/actions/workflows/pages/pages-build-deployment)
![Licença](https://img.shields.io/badge/licen%C3%A7a-MIT-blue.svg)
![Versão](https://img.shields.io/badge/vers%C3%A3o-3.0.0-brightgreen)

Um sistema de produtividade multiusuário para equipas de atendimento, focado em agilizar a comunicação e automatizar tarefas repetitivas. O ATI combina um gerenciador de respostas rápidas com um conversor inteligente de aditivos contratuais em PDF, tudo com contas de usuário individuais e um painel de administração.

### ✨ [Acesse a versão ao vivo aqui!](https://vituali.github.io/ATI/)

---

## 🚀 Funcionalidades Principais

O ATI é dividido em duas ferramentas principais, com uma interface totalmente personalizável e um sistema de autenticação completo.

* **🔐 Sistema de Autenticação e Gerenciamento:**
    * **Contas Individuais:** Sistema completo de Registro e Login para cada atendente.
    * **Login Flexível:** Permite o login tanto com **nome de usuário** quanto com **e-mail**.
    * **Gerenciamento de Perfil:** Usuários podem alterar o próprio nome completo e senha.
    * **Painel de Administração:** Uma área restrita para administradores gerenciarem outros usuários, alterando suas permissões (role) e status (ativo/inativo).
    * **Segurança Robusta:** Regras de segurança no Firebase impedem o acesso não autorizado e a sobrescrita de nomes de usuário.

* **💬 Chat Automatizado:**
    * Crie, edite e apague respostas padrão salvas na sua conta.
    * **Modelo para Novos Usuários:** Novos registros começam com um conjunto de respostas-padrão para facilitar a integração.
    * Organize as respostas em categorias customizáveis.
    * Reordene tanto as categorias quanto as respostas com um sistema de **Arrastar e Soltar (Drag and Drop)**.
    * Use marcadores dinâmicos como `[SAUDACAO]` e `[DESPEDIDA]` que se ajustam ao horário.

* **📄 Conversor de Aditivos:**
    * Faça o upload de um aditivo contratual em PDF.
    * O sistema extrai automaticamente: Número do Contrato, Nome do Cliente e Endereços.
    * Preencha informações adicionais num formulário inteligente.
    * Gere uma Ordem de Serviço (O.S.) completa e formatada com um clique.

* **🎨 Interface Personalizável:**
    * Alterne entre **Modo Claro** e **Modo Escuro**.
    * Ative/desative o efeito de **Bordas Neon**.
    * Escolha cores personalizadas para ícones, bordas e títulos.
    * As preferências são salvas no navegador e persistem entre as sessões.

## 🛠️ Tecnologias Utilizadas

Este projeto foi construído com tecnologias web puras para garantir leveza e performance.

* **Frontend:** HTML5, CSS3 (com Variáveis CSS), JavaScript (ES6 Modules)
* **Autenticação e Banco de Dados:** Firebase Authentication e Firebase Realtime Database
* **Bibliotecas:**
    * [SortableJS](https://github.com/SortableJS/Sortable): Para a funcionalidade de Arrastar e Soltar.
    * [PDF.js](https://mozilla.github.io/pdf.js/): Para a leitura e extração de texto de arquivos PDF.
* **Hospedagem e CI/CD:** GitHub Pages com GitHub Actions para deploy automático.

## ⚙️ Como Rodar o Projeto Localmente

1.  **Clone o repositório:**
    ```bash
    git clone [https://github.com/vituali/ATI.git](https://github.com/vituali/ATI.git)
    ```
2.  **Navegue até a pasta do projeto:**
    ```bash
    cd ATI
    ```
3.  **Inicie um servidor local:**
    Como o projeto usa Módulos JavaScript (ESM), ele precisa ser servido por um servidor web. A forma mais fácil é usando `http-server`.
    * Se não tiver o `http-server`, instale globalmente com o Node.js:
        ```bash
        npm install -g http-server
        ```
    * Inicie o servidor na pasta do projeto:
        ```bash
        http-server
        ```
    * Abra o endereço fornecido (geralmente `http://localhost:8080`) no seu navegador.

## 🗂️ Estrutura de Ramificação (Branching Strategy)

* **`main`**: Branch de produção. Contém apenas o código estável que está no ar.
* **`develop`**: Branch principal de desenvolvimento. Todas as novas funcionalidades são mescladas aqui.
* **`feature/*`**: Branches para novas funcionalidades ou correções.

## 📄 Licença

Este projeto está sob a licença MIT. Veja o arquivo `LICENSE` para mais detalhes.

---

*Desenvolvido por [Vituali](https://github.com/vituali).*


// --- Start_dev.bat ---

http-server